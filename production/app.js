var startTempo = 2500;
var tempo = 3900 - (startTempo - 1300);
var startMeasure = 1;
var endMeasure = 2;
var timers = new Array();
var noteOn = new Array();
var didPressPlayBtn = 0;
var delay = 0;
var startDelay = 0;
var feedbackFormDisplayed = 0;
var currentPosition = 1;
var measureSlider;
var tempoSlider;

var DELAY = 0;
var DURATION = 1;
var NOTE = 2;
var VELOCITY = 3;
var FINGER = 4;

var STARTPLAY = 0;
var REPEAT = 1;
var TURNOFFNOTES = 2;
var STOP = 3;



$(document).ready(function() {
	/* Load the MIDI Player*/
	MIDI.loadPlugin({
		soundfontUrl: "./soundfont/",
		instrument: "acoustic_grand_piano",
		callback: function() {
			// MIDI Player has loaded, so now allow user interaction
			drawScreen();
			MIDI.setVolume(0, 127);
		}
	});	
});

/* --- ================ CONTROLS ================== */

function didPressPlayButton(option)
{
	if(feedbackFormDisplayed)
		return;
	
	if ($("#playButton").text() == "Play")
	{
		$("#playButton").text("Pause");
	}	
	else if (didPressPlayBtn == 1 && option == STARTPLAY)
	{
		didPressPauseButton(0);
		return;
	}
	
	didPressPlayBtn = 1;
	
	if (option == STARTPLAY)
	{
		oldTempo = tempo;
		tempo = 200; // Fast forward to the next note upon resume;
	}
	
	for (measure = Math.floor(startMeasure); measure < Math.ceil(endMeasure); measure++)
	{
		for (var noteIdx = 0; noteIdx < tune[measure].length; noteIdx++)
		{
			var note = tune[measure][noteIdx][NOTE];
			var key = note - 21;
			var color = "#00FF00";
			var noteStart = tune[measure][noteIdx][DELAY];
			var noteDuration = tune[measure][noteIdx][DURATION];
			var noteEnd = noteStart + noteDuration;
			
			if (noteEnd > (endMeasure - 1) * 4)
				noteEnd = (endMeasure - 1) * 4 - 0.01;
			
			if ( (delay - 0.01) <= noteStart && noteStart < delay )
			{
				// Turn note on (sound + visual)
				//debug("ON " + note + " " + noteStart + " " + noteEnd);
				
				if (tempo == 200) // End fastfoward
					tempo = oldTempo;
				
				var hand = $('input:radio[name=hand]:checked').val();
				var finger = tune[measure][noteIdx][FINGER];
				if (( finger < 0 && hand == "right") || (finger > 0 && hand == "left"))
					continue;
	
				MIDI.noteOn(0, note, tune[measure][noteIdx][VELOCITY], 0);
				if (finger < 0)
				{
					color = "red";
					finger *= -1;
				}
				$("#key-"+key).css("background-color",color);
				$("#keyLabel-"+key).text(finger);
				noteOn.push(note);
	
			}
			else if ((delay - 0.01) < (noteEnd - 0.01) && (noteEnd - 0.01) <= delay)
			{
				// Hide note (visualy)
				resetNote(note);
			}
			else if ((delay - 0.01) < noteEnd && noteEnd <= delay)
			{
				// Turn note off (sound)
				MIDI.noteOff(0, note, 0);
	
			}		
		}
	}
	
	var repeat = $("#repeatCheck").is(':checked');
	endDelay = (endMeasure - 1) * 4;
	startDelay = (startMeasure - 1) * 4;

	if (!repeat && delay >= endDelay - 0.01)
	{
		// Arrived at end of measure. Don't repeat
		didPressPauseButton(3);
		return;
	}
	
	timers.push(setTimeout(function() {
		delay += 0.01;
		if (delay < startDelay || delay > endDelay)
		{
			didPressPauseButton(STOP);
		}
		currentPosition = (Math.floor((delay/4 + 1)*100)/100).toFixed(2);
		$("#currentPosition").text(currentPosition);
		// Update Measure Display
		$("#curPosition").css("left", (delay/4) * playIntervalWidth);
		didPressPlayButton(REPEAT);
	}, 4*tempo/600));	
	
}

function didPressPauseButton(option)
{
	didPressPlayBtn = 0;
	$("#playButton").text("Play");
	
	if (option == STOP)
	{
		delay = startDelay;
		currentPosition = (Math.floor((delay/4 + 1)*100)/100).toFixed(2);
		$("#currentPosition").text(currentPosition);
		// Update Measure Display
		$("#curPosition").css("left", (delay/4) * playIntervalWidth);
	}

	for (var note = 21; note < 108; note++)
	{
		MIDI.noteOff(0, note, 0);

		if (option)
			resetNote(note);
	}

	// clear all timers in the array
	for (var i = 0; i < timers.length; i++)
	{
	    clearTimeout(timers[i]);
	}
}

function resetNote(note)
{
	key = note - 21;
	color = "white";
	var keyIdx = key % 12;
	if (keyIdx==1 || keyIdx==4 || keyIdx==6 || keyIdx == 9 || keyIdx==11)
	{
		color = "black";
	}
	$("#key-"+key).css("background-color",color);
	$("#keyLabel-"+key).text("");
	noteOn.splice(noteOn.indexOf(note), 1);
}

function updatePosition(val)
{

	position = Math.floor(currentPosition);

	if (isNaN(Number(val)) && !(val == "+" || val == "-"))
		val = 0;
		
	if (val == "-")
	{
		val = Number(position) - 1;
		if (val == 0)
		{
			val = 1;
		}
	}
	
	maxMeasure = Math.floor(tune.length);

	if (val == "+")
	{
		if (position + 1 == maxMeasure)
			return;
		val = Number(position) + 1;
	}
	
	// Limit to min measure
	if (val < 1)
		val = 1;
		
	// Limit to max measure
	if (val > maxMeasure)
		val = maxMeasure;
		
	// Set new measure	
	$("#curPosition").val(val);
	position = val;
	delay = (position - 1) * 4;


	// Update Start Measure
	if (position < startMeasure)
		updateStartMeasure(Math.floor(Number(position))-1);
		
	// Update End Measure
	if (position >= endMeasure)
		updateEndMeasure(Math.floor(Number(position))+1);

	// Update Measure Display
	$("#curPosition").css("left", (delay/4) * playIntervalWidth);
	didPressPauseButton(TURNOFFNOTES);
	didPressPlayButton(STARTPLAY);

}

function updateStartMeasure(val)
{
	if (isNaN(Number(val)) && !(val == "+" || val == "-"))
		val = 0;
		
	if (val == "-")
	{
		val = Number(startMeasure) - 1;
		if (val == 0)
		{
			return;
		}
	}
	
	maxMeasure = Math.floor(tune.length);

	if (val == "+")
	{
		if (startMeasure == maxMeasure)
			return;
		val = Number(startMeasure) + 1;
	}
	
	// Limit to min measure
	if (val < 1)
		val = 1;
		
	// Limit to max measure
	if (val > maxMeasure)
		val = maxMeasure;
		
	// Set new measure	
	$("#startMeasure").val(val);
	startMeasure = val;
	
	// Update End Measure
	if (startMeasure >= endMeasure)
		updateEndMeasure(Number(startMeasure)+1);


	// Update Measure Display
	$("#playInterval").css("left", (startMeasure-1) * (playIntervalWidth));
	$("#playInterval").css("width", (endMeasure - startMeasure) * (playIntervalWidth));
}

function updateEndMeasure(val)
{
	if (isNaN(Number(val)) && !(val == "+" || val == "-"))
		val = 0;
		
	if (val == "-")
	{
		val = Number(endMeasure) - 1;
		if (val == 0)
		{
			return;
		}
	}
	
	maxMeasure = Math.floor(tune.length);

	if (val == "+")
	{
		if (endMeasure == maxMeasure)
			return;
		val = Number(endMeasure) + 1;
	}
	
	// Limit to min measure
	if (val < 1)
		val = 1;
		
	// Limit to max measure
	if (val > maxMeasure)
		val = maxMeasure;
		
	// Set new measure	
	$("#endMeasure").val(val);
	endMeasure = val;

	// Update Start Measure
	if (endMeasure <= startMeasure)
		updateStartMeasure(Number(endMeasure)-1);

	// Update Measure Display
	$("#playInterval").css("width", (endMeasure - startMeasure) * (playIntervalWidth));
}

function updateTempo(slider, val) {
	if (isNaN(Number(val)) && !(val == "+" || val == "-"))
		val = 0;

	if (val == "-")
		val = Number(tempo) + 200;

	if (val == "+")
		val = Number(tempo) - 200;
		
			// Limit to min measure
	if (val < 1)
		val = 1;

	// Limit to max tempo
	if (val < 1300)
		val = 1300;
		
	// Limit to min tempo
	if (val > 3900)
		val = 3900;
		
	// Set new tempo	
	tempoSlider.setValue(3900 - (val - 1300));
	document.getElementById("tempo").value = 3900 - (val - 1300);
	tempo = val;
};

function repeatToggle()
{
	if($("#repeatCheck").is(':checked'))
	{
		$('#repeatCheck').prop('checked', false);

	}
	else
	{
		$('#repeatCheck').prop('checked', true);
	}
	
	repeatMask();
}

function repeatMask()
{
	if($("#repeatCheck").is(':checked'))
	{
		startMeasure = savedStartMeasure;
		endMeasure = savedEndMeasure;
		updateStartMeasure(startMeasure);
		updateEndMeasure(endMeasure);
		$('#playInterval').css("display","");
	}
	else
	{
		$('#playInterval').css("display","none");
		savedStartMeasure = startMeasure;
		savedEndMeasure = endMeasure;
		updateStartMeasure(1);
		updateEndMeasure(tune.length);
	}
	
}

function didSelectHand(hand)
{
	for(var key = 0; key < 88; key++)
	{
		note = key + 21
		keyColor =  $("#key-"+key).css("background-color");
		if ((keyColor == "rgb(255, 0, 0)" && hand == "right") || (keyColor == "rgb(0, 255, 0)" && hand == "left"))
		{
			resetNote(note);
			MIDI.noteOff(0, note, 0);
		}
	}
}



/* --- ================ DEBUG ================== */
debugTop = 0;
function debug(param)
{
	try { param = param.replace(/</g, "&lt;").replace(/>/g, "&gt;"); }
	catch(err){}
	param = '<div id="debug" style="position:absolute;z-index:6;top:'+debugTop+'px;left:10px;color:red;font-size:15px">' + param + "<br></div>";
	$("#debug").append(param);
	debugTop += 40;
}var tune =[			//DELAY,		DURATION,		NOTE,	VELOCITY,	Finger		,		,			Measure
	[		[								]	]	,			
	[	[	0	,	3.98958	,	37,	37,	-5	]	,				//	1
		[	0	,	3.98958	,	49,	29,	-1	]	,				//	1
		[	0	,	0.333333	,	56,	46,	1	]	,				//	1
		[	0.333333	,	0.333333	,	61,	30,	2	]	,				//	1
		[	0.666667	,	0.333333	,	64,	43,	4	]	,				//	1
		[	1	,	0.333333	,	56,	38,	1	]	,				//	1
		[	1.33333	,	0.333333	,	61,	29,	2	]	,				//	1
		[	1.66667	,	0.333333	,	64,	32,	4	]	,				//	1
		[	2	,	0.333333	,	56,	32,	1	]	,				//	1
		[	2.33333	,	0.333333	,	61,	25,	2	]	,				//	1
		[	2.66667	,	0.333333	,	64,	25,	4	]	,				//	1
		[	3	,	0.333333	,	56,	33,	1	]	,				//	1
		[	3.33333	,	0.333333	,	61,	29,	2	]	,				//	1
		[	3.66667	,	0.333333	,	64,	29,	4	]		]	,		//	1
	[	[	4	,	3.98958	,	35,	42,	-5	]	,				//	2
		[	4	,	3.98958	,	47,	38,	-1	]	,				//	2
		[	4	,	0.333333	,	56,	25,	1	]	,				//	2
		[	4.33333	,	0.34375	,	61,	27,	2	]	,				//	2
		[	4.65625	,	0.333333	,	64,	27,	4	]	,				//	2
		[	5	,	0.333333	,	56,	30,	1	]	,				//	2
		[	5.33333	,	0.333333	,	61,	29,	2	]	,				//	2
		[	5.66667	,	0.333333	,	64,	27,	4	]	,				//	2
		[	6	,	0.333333	,	56,	27,	1	]	,				//	2
		[	6.33333	,	0.333333	,	61,	25,	2	]	,				//	2
		[	6.66667	,	0.333333	,	64,	34,	4	]	,				//	2
		[	7	,	0.333333	,	56,	37,	1	]	,				//	2
		[	7.33333	,	0.333333	,	61,	31,	2	]	,				//	2
		[	7.66667	,	0.333333	,	64,	37,	4	]		]	,		//	2
	[	[	8	,	1.98958	,	33,	37,	-5	]	,				//	3
		[	8	,	1.98958	,	45,	39,	-1	]	,				//	3
		[	8	,	0.333333	,	57,	41,	1	]	,				//	3
		[	8.33333	,	0.333333	,	61,	25,	2	]	,				//	3
		[	8.66667	,	0.333333	,	64,	33,	4	]	,				//	3
		[	9	,	0.333333	,	57,	28,	1	]	,				//	3
		[	9.33333	,	0.333333	,	61,	33,	2	]	,				//	3
		[	9.66667	,	0.333333	,	64,	32,	4	]	,				//	3
		[	10	,	1.98958	,	30,	27,	-5	]	,				//	3
		[	10	,	1.98958	,	42,	29,	-1	]	,				//	3
		[	10	,	0.645833	,	57,	36,	1	]	,				//	3
		[	10.3333	,	0.333333	,	62,	37,	2	]	,				//	3
		[	10.6667	,	0.333333	,	66,	42,	4	]	,				//	3
		[	11	,	0.333333	,	57,	33,	1	]	,				//	3
		[	11.3333	,	0.333333	,	62,	31,	2	]	,				//	3
		[	11.6667	,	0.333333	,	66,	34,	4	]		]	,		//	3
	[	[	12	,	1.98958	,	32,	37,	-5	]	,				//	4
		[	12	,	1.98958	,	44,	31,	-1	]	,				//	4
		[	12	,	0.333333	,	56,	44,	1	]	,				//	4
		[	12.3333	,	0.333333	,	60,	26,	2	]	,				//	4
		[	12.6667	,	0.333333	,	66,	36,	5	]	,				//	4
		[	13	,	0.333333	,	56,	44,	1	]	,				//	4
		[	13.3333	,	0.333333	,	61,	28,	2	]	,				//	4
		[	13.6667	,	0.333333	,	64,	33,	4	]	,				//	4
		[	14	,	0.989583	,	32,	39,	-5	]	,				//	4
		[	14	,	0.989583	,	44,	32,	-1	]	,				//	4
		[	14	,	0.333333	,	56,	37,	1	]	,				//	4
		[	14.3333	,	0.333333	,	61,	26,	2	]	,				//	4
		[	14.6667	,	0.333333	,	63,	46,	3	]	,				//	4
		[	15	,	0.333333	,	54,	39,	1	]	,				//	4
		[	15.3333	,	0.333333	,	60,	38,	2	]	,				//	4
		[	15.6667	,	0.333333	,	63,	25,	4	]		]	,		//	4
	[	[	16	,	3.98958	,	37,	25,	-5	]	,				//	5
		[	16	,	3.98958	,	44,	33,	-2	]	,				//	5
		[	16	,	3.98958	,	49,	23,	-1	]	,				//	5
		[	16	,	0.333333	,	52,	36,	1	]	,				//	5
		[	16.3333	,	0.333333	,	56,	27,	2	]	,				//	5
		[	16.6667	,	0.333333	,	61,	35,	4	]	,				//	5
		[	17	,	0.333333	,	56,	36,	1	]	,				//	5
		[	17.3333	,	0.333333	,	61,	22,	2	]	,				//	5
		[	17.6667	,	0.333333	,	64,	21,	4	]	,				//	5
		[	18	,	0.333333	,	56,	42,	1	]	,				//	5
		[	18.3333	,	0.333333	,	61,	27,	2	]	,				//	5
		[	18.6667	,	0.333333	,	64,	39,	4	]	,				//	5
		[	19	,	0.333333	,	56,	46,	1	]	,				//	5
		[	19	,	0.75	,	68,	55,	5	]	,				//	5
		[	19.3333	,	0.333333	,	61,	28,	2	]	,				//	5
		[	19.6667	,	0.333333	,	64,	26,	4	]	,				//	5
		[	19.75	,	0.25	,	68,	48,	5	]		]	,		//	5
	[	[	20	,	3.98958	,	36,	40,	-5	]	,				//	6
		[	20	,	3.98958	,	44,	32,	-2	]	,				//	6
		[	20	,	3.98958	,	48,	28,	-1	]	,				//	6
		[	20	,	0.333333	,	56,	43,	1	]	,				//	6
		[	20	,	2.98958	,	68,	55,	5	]	,				//	6
		[	20.3333	,	0.333333	,	63,	31,	3	]	,				//	6
		[	20.6667	,	0.333333	,	66,	33,	4	]	,				//	6
		[	21	,	0.333333	,	56,	32,	1	]	,				//	6
		[	21.3333	,	0.333333	,	63,	26,	3	]	,				//	6
		[	21.6667	,	0.333333	,	66,	27,	4	]	,				//	6
		[	22	,	0.333333	,	56,	27,	1	]	,				//	6
		[	22.3333	,	0.333333	,	63,	31,	3	]	,				//	6
		[	22.6667	,	0.333333	,	66,	33,	4	]	,				//	6
		[	23	,	0.333333	,	56,	32,	1	]	,				//	6
		[	23	,	0.75	,	68,	49,	5	]	,				//	6
		[	23.3333	,	0.333333	,	63,	32,	3	]	,				//	6
		[	23.6667	,	0.333333	,	66,	38,	4	]	,				//	6
		[	23.75	,	0.25	,	68,	52,	5	]		]	,		//	6
	[	[	24	,	1.98958	,	37,	37,	-5	]	,				//	7
		[	24	,	1.98958	,	49,	34,	-1	]	,				//	7
		[	24	,	0.333333	,	56,	54,	1	]	,				//	7
		[	24	,	1.98958	,	68,	61,	5	]	,				//	7
		[	24.3333	,	0.333333	,	61,	29,	2	]	,				//	7
		[	24.6667	,	0.333333	,	64,	30,	4	]	,				//	7
		[	25	,	0.333333	,	56,	23,	1	]	,				//	7
		[	25.3333	,	0.333333	,	61,	23,	2	]	,				//	7
		[	25.6667	,	0.333333	,	64,	32,	4	]	,				//	7
		[	26	,	1.98958	,	30,	33,	-5	]	,				//	7
		[	26	,	1.98958	,	42,	28,	-1	]	,				//	7
		[	26	,	0.34375	,	57,	38,	1	]	,				//	7
		[	26	,	1.98958	,	69,	54,	5	]	,				//	7
		[	26.3333	,	0.333333	,	61,	26,	2	]	,				//	7
		[	26.6667	,	0.333333	,	66,	32,	4	]	,				//	7
		[	27	,	0.333333	,	57,	26,	1	]	,				//	7
		[	27.3333	,	0.333333	,	61,	27,	2	]	,				//	7
		[	27.6667	,	0.333333	,	66,	33,	4	]		]	,		//	7
	[	[	28	,	1.98958	,	35,	37,	-5	]	,				//	8
		[	28	,	1.98958	,	47,	24,	-1	]	,				//	8
		[	28	,	0.333333	,	56,	25,	1	]	,				//	8
		[	28	,	1.98958	,	68,	51,	5	]	,				//	8
		[	28.3333	,	0.333333	,	59,	51,	2	]	,				//	8
		[	28.6667	,	0.333333	,	64,	40,	4	]	,				//	8
		[	29	,	0.333333	,	56,	25,	1	]	,				//	8
		[	29.3333	,	0.333333	,	59,	24,	2	]	,				//	8
		[	29.6667	,	0.333333	,	64,	34,	4	]	,				//	8
		[	29.9896	,	0.427083	,	66,	53,	5	]	,				//	8
		[	30	,	1.98958	,	35,	25,	-5	]	,				//	8
		[	30	,	1.98958	,	47,	24,	-1	]	,				//	8
		[	30	,	0.333333	,	57,	38,	1	]	,				//	8
		[	30.3333	,	0.333333	,	59,	29,	2	]	,				//	8
		[	30.6667	,	0.333333	,	63,	18,	4	]	,				//	8
		[	30.9167	,	0.0729167	,	57,	40,	1	]	,				//	8
		[	31	,	0.989583	,	71,	48,	5	]	,				//	8
		[	31.3333	,	0.333333	,	59,	34,	1	]	,				//	8
		[	31.6667	,	0.333333	,	63,	40,	2	]		]	,		//	8
	[	[	32	,	3.98958	,	40,	36,	-5	]	,				//	9
		[	32	,	3.98958	,	52,	21,	-1	]	,				//	9
		[	32	,	0.333333	,	56,	25,	1	]	,				//	9
		[	32.3333	,	0.333333	,	59,	35,	2	]	,				//	9
		[	32.6667	,	0.322917	,	64,	25,	4	]	,				//	9
		[	33	,	0.333333	,	56,	22,	1	]	,				//	9
		[	33.3333	,	0.333333	,	59,	24,	2	]	,				//	9
		[	33.6667	,	0.333333	,	64,	30,	4	]	,				//	9
		[	34	,	0.333333	,	56,	25,	1	]	,				//	9
		[	34.3333	,	0.333333	,	59,	24,	2	]	,				//	9
		[	34.6667	,	0.333333	,	64,	36,	4	]	,				//	9
		[	35	,	0.333333	,	56,	27,	1	]	,				//	9
		[	35.3333	,	0.333333	,	59,	26,	2	]	,				//	9
		[	35.6667	,	0.333333	,	64,	28,	4	]		]	,		//	9
	[	[	36	,	3.98958	,	40,	36,	-5	]	,				//	10
		[	36	,	3.98958	,	52,	33,	-1	]	,				//	10
		[	36	,	0.333333	,	55,	36,	1	]	,				//	10
		[	36.3333	,	0.333333	,	59,	35,	2	]	,				//	10
		[	36.6667	,	0.333333	,	64,	30,	4	]	,				//	10
		[	37	,	0.333333	,	55,	34,	1	]	,				//	10
		[	37.3333	,	0.333333	,	59,	22,	2	]	,				//	10
		[	37.6667	,	0.333333	,	64,	27,	4	]	,				//	10
		[	38	,	0.333333	,	55,	29,	1	]	,				//	10
		[	38.3333	,	0.333333	,	59,	24,	2	]	,				//	10
		[	38.6667	,	0.333333	,	64,	25,	4	]	,				//	10
		[	39	,	0.333333	,	55,	41,	1	]	,				//	10
		[	39	,	0.75	,	67,	58,	5	]	,				//	10
		[	39.3333	,	0.333333	,	59,	33,	2	]	,				//	10
		[	39.6667	,	0.333333	,	64,	41,	4	]	,				//	10
		[	39.75	,	0.25	,	67,	37,	5	]		]	,		//	10
	[	[	40	,	3.98958	,	38,	25,	-5	]	,				//	11
		[	40	,	3.98958	,	50,	19,	-1	]	,				//	11
		[	40	,	0.333333	,	55,	26,	1	]	,				//	11
		[	40	,	2.98958	,	67,	48,	5	]	,				//	11
		[	40.3333	,	0.333333	,	59,	36,	2	]	,				//	11
		[	40.6667	,	0.333333	,	65,	41,	4	]	,				//	11
		[	41	,	0.333333	,	55,	25,	1	]	,				//	11
		[	41.3333	,	0.333333	,	59,	25,	2	]	,				//	11
		[	41.6667	,	0.333333	,	65,	30,	4	]	,				//	11
		[	42	,	0.333333	,	55,	26,	1	]	,				//	11
		[	42.3333	,	0.333333	,	59,	24,	2	]	,				//	11
		[	42.6667	,	0.333333	,	65,	34,	4	]	,				//	11
		[	43	,	0.333333	,	55,	34,	1	]	,				//	11
		[	43	,	0.75	,	67,	55,	5	]	,				//	11
		[	43.3333	,	0.333333	,	59,	35,	2	]	,				//	11
		[	43.6667	,	0.333333	,	65,	42,	4	]	,				//	11
		[	43.75	,	0.25	,	67,	56,	5	]		]	,		//	11
	[	[	44	,	0.989583	,	36,	32,	-5	]	,				//	12
		[	44	,	0.989583	,	48,	40,	-1	]	,				//	12
		[	44	,	0.333333	,	55,	40,	1	]	,				//	12
		[	44	,	2.98958	,	67,	53,	5	]	,				//	12
		[	44.3333	,	0.333333	,	60,	37,	2	]	,				//	12
		[	44.6667	,	0.333333	,	64,	36,	4	]	,				//	12
		[	45	,	0.989583	,	35,	46,	-5	]	,				//	12
		[	45	,	0.989583	,	47,	40,	-1	]	,				//	12
		[	45	,	0.333333	,	55,	40,	1	]	,				//	12
		[	45.3333	,	0.333333	,	59,	36,	2	]	,				//	12
		[	45.6667	,	0.333333	,	64,	29,	4	]	,				//	12
		[	46	,	1.98958	,	34,	37,	-5	]	,				//	12
		[	46	,	1.98958	,	46,	38,	-1	]	,				//	12
		[	46	,	0.333333	,	55,	52,	1	]	,				//	12
		[	46.3333	,	0.333333	,	61,	38,	2	]	,				//	12
		[	46.6667	,	0.333333	,	64,	36,	4	]	,				//	12
		[	47	,	0.333333	,	54,	47,	1	]	,				//	12
		[	47	,	0.989583	,	66,	60,	5	]	,				//	12
		[	47.3333	,	0.333333	,	61,	43,	2	]	,				//	12
		[	47.6667	,	0.333333	,	64,	36,	4	]		]	,		//	12
	[	[	48	,	1.98958	,	35,	34,	-5	]	,				//	13
		[	48	,	1.98958	,	47,	40,	-1	]	,				//	13
		[	48	,	0.333333	,	54,	32,	1	]	,				//	13
		[	48	,	1.98958	,	66,	43,	5	]	,				//	13
		[	48.3333	,	0.333333	,	59,	27,	2	]	,				//	13
		[	48.6667	,	0.333333	,	62,	25,	3	]	,				//	13
		[	49	,	0.333333	,	54,	30,	1	]	,				//	13
		[	49.3333	,	0.333333	,	59,	37,	2	]	,				//	13
		[	49.6667	,	0.333333	,	62,	33,	3	]	,				//	13
		[	50	,	0.989583	,	40,	43,	-3	]	,				//	13
		[	50	,	0.333333	,	55,	48,	1	]	,				//	13
		[	50	,	0.989583	,	67,	58,	5	]	,				//	13
		[	50.3333	,	0.333333	,	59,	42,	2	]	,				//	13
		[	50.6667	,	0.333333	,	61,	47,	3	]	,				//	13
		[	51	,	0.333333	,	43,	44,	-1	]	,				//	13
		[	51	,	0.989583	,	52,	47,	1	]	,				//	13
		[	51	,	0.989583	,	64,	54,	5	]	,				//	13
		[	51.3333	,	0.333333	,	59,	43,	3	]	,				//	13
		[	51.6667	,	0.333333	,	61,	54,	4	]		]	,		//	13
	[	[	52	,	1.98958	,	42,	34,	-1	]	,				//	14
		[	52	,	0.333333	,	54,	39,	1	]	,				//	14
		[	52	,	1.98958	,	66,	54,	5	]	,				//	14
		[	52.3333	,	0.333333	,	59,	31,	2	]	,				//	14
		[	52.6667	,	0.333333	,	62,	37,	3	]	,				//	14
		[	53	,	0.989583	,	54,	30,	1	]	,				//	14
		[	53.3333	,	0.333333	,	59,	27,	2	]	,				//	14
		[	53.6667	,	0.333333	,	62,	37,	3	]	,				//	14
		[	54	,	1.98958	,	30,	34,	-5	]	,				//	14
		[	54	,	1.98958	,	42,	34,	-1	]	,				//	14
		[	54	,	0.333333	,	54,	31,	1	]	,				//	14
		[	54	,	2.01042	,	66,	48,	5	]	,				//	14
		[	54.3333	,	0.333333	,	58,	30,	2	]	,				//	14
		[	54.6667	,	0.333333	,	61,	37,	3	]	,				//	14
		[	55	,	0.333333	,	54,	27,	1	]	,				//	14
		[	55.3333	,	0.333333	,	58,	32,	2	]	,				//	14
		[	55.6667	,	0.34375	,	61,	30,	3	]		]	,		//	14
	[	[	56	,	4.98958	,	35,	42,	-5	]	,				//	15
		[	56	,	4.98958	,	47,	40,	-1	]	,				//	15
		[	56	,	0.333333	,	59,	30,	1	]	,				//	15
		[	56.3333	,	0.333333	,	62,	24,	2	]	,				//	15
		[	56.6667	,	0.333333	,	66,	31,	4	]	,				//	15
		[	57	,	0.333333	,	59,	48,	1	]	,				//	15
		[	57.3333	,	0.333333	,	62,	39,	2	]	,				//	15
		[	57.6667	,	0.333333	,	66,	40,	4	]	,				//	15
		[	58	,	0.333333	,	59,	46,	1	]	,				//	15
		[	58.3333	,	0.333333	,	63,	49,	2	]	,				//	15
		[	58.6667	,	0.333333	,	66,	49,	4	]	,				//	15
		[	59	,	0.333333	,	59,	56,	1	]	,				//	15
		[	59	,	0.989583	,	71,	66,	5	]	,				//	15
		[	59.3333	,	0.333333	,	63,	34,	2	]	,				//	15
		[	59.6667	,	0.333333	,	66,	40,	3	]		]	,		//	15
	[	[	60	,	0.333333	,	59,	82,	1	]	,				//	16
		[	60.3333	,	0.333333	,	64,	52,	2	]	,				//	16
		[	60.6667	,	0.333333	,	67,	33,	3	]	,				//	16
		[	61	,	0.989583	,	40,	52,	-5	]	,				//	16
		[	61	,	0.989583	,	52,	53,	-1	]	,				//	16
		[	61	,	0.78125	,	59,	42,	1	]	,				//	16
		[	61.3229	,	0.333333	,	64,	40,	2	]	,				//	16
		[	61.6667	,	0.333333	,	67,	24,	3	]	,				//	16
		[	62	,	0.989583	,	43,	77,	-5	]	,				//	16
		[	62	,	0.989583	,	55,	81,	-1	]	,				//	16
		[	62	,	0.333333	,	59,	57,	1	]	,				//	16
		[	62.3333	,	0.333333	,	64,	41,	2	]	,				//	16
		[	62.6667	,	0.333333	,	67,	55,	3	]	,				//	16
		[	63	,	0.989583	,	40,	34,	-5	]	,				//	16
		[	63	,	0.989583	,	52,	51,	-1	]	,				//	16
		[	63	,	0.333333	,	59,	47,	1	]	,				//	16
		[	63	,	0.989583	,	70,	54,	5	]	,				//	16
		[	63.3333	,	0.333333	,	64,	31,	2	]	,				//	16
		[	63.6667	,	0.333333	,	67,	34,	3	]		]	,		//	16
	[	[	64	,	4.33333	,	35,	33,	-5	]	,				//	17
		[	64	,	4.33333	,	47,	29,	-1	]	,				//	17
		[	64	,	0.333333	,	59,	24,	1	]	,				//	17
		[	64	,	2.98958	,	71,	44,	5	]	,				//	17
		[	64.3333	,	0.333333	,	63,	32,	2	]	,				//	17
		[	64.6667	,	0.333333	,	66,	30,	3	]	,				//	17
		[	65	,	0.333333	,	59,	30,	1	]	,				//	17
		[	65.3333	,	0.333333	,	63,	25,	2	]	,				//	17
		[	65.6667	,	0.333333	,	66,	30,	3	]	,				//	17
		[	66	,	0.333333	,	59,	19,	1	]	,				//	17
		[	66.3333	,	0.333333	,	63,	34,	2	]	,				//	17
		[	66.6667	,	0.333333	,	66,	36,	3	]	,				//	17
		[	67	,	0.333333	,	59,	44,	1	]	,				//	17
		[	67	,	0.989583	,	71,	62,	5	]	,				//	17
		[	67.3333	,	0.395833	,	63,	34,	2	]	,				//	17
		[	67.6667	,	0.1875	,	66,	33,	3	]		]	,		//	17
	[	[	68	,	0.333333	,	59,	34,	1	]	,				//	18
		[	68.3333	,	0.333333	,	64,	26,	2	]	,				//	18
		[	68.6667	,	0.333333	,	67,	28,	3	]	,				//	18
		[	69	,	0.989583	,	40,	48,	-5	]	,				//	18
		[	69	,	0.989583	,	52,	46,	-1	]	,				//	18
		[	69	,	0.333333	,	59,	37,	1	]	,				//	18
		[	69.3333	,	0.333333	,	64,	31,	2	]	,				//	18
		[	69.6667	,	0.333333	,	67,	36,	3	]	,				//	18
		[	70	,	0.989583	,	43,	68,	-5	]	,				//	18
		[	70	,	0.989583	,	55,	74,	-1	]	,				//	18
		[	70	,	0.333333	,	59,	62,	1	]	,				//	18
		[	70.3333	,	0.333333	,	64,	36,	2	]	,				//	18
		[	70.6667	,	0.333333	,	67,	39,	3	]	,				//	18
		[	71	,	0.989583	,	40,	34,	-5	]	,				//	18
		[	71	,	0.989583	,	52,	47,	-1	]	,				//	18
		[	71	,	0.333333	,	59,	47,	1	]	,				//	18
		[	71	,	0.989583	,	70,	58,	5	]	,				//	18
		[	71.3333	,	0.333333	,	64,	25,	2	]	,				//	18
		[	71.6667	,	0.333333	,	67,	22,	3	]		]	,		//	18
	[	[	72	,	1.98958	,	35,	53,	-5	]	,				//	19
		[	72	,	1.98958	,	47,	31,	-1	]	,				//	19
		[	72	,	0.333333	,	59,	33,	1	]	,				//	19
		[	72	,	1.98958	,	71,	47,	5	]	,				//	19
		[	72.3333	,	0.333333	,	63,	27,	2	]	,				//	19
		[	72.6667	,	0.333333	,	66,	27,	3	]	,				//	19
		[	73	,	0.333333	,	59,	28,	1	]	,				//	19
		[	73.3333	,	0.333333	,	63,	31,	2	]	,				//	19
		[	73.6667	,	0.333333	,	66,	34,	3	]	,				//	19
		[	74	,	1.98958	,	32,	32,	-5	]	,				//	19
		[	74	,	1.98958	,	44,	36,	-1	]	,				//	19
		[	74	,	0.333333	,	59,	28,	1	]	,				//	19
		[	74	,	1.98958	,	71,	41,	5	]	,				//	19
		[	74.3333	,	0.333333	,	62,	22,	2	]	,				//	19
		[	74.6667	,	0.333333	,	65,	33,	3	]	,				//	19
		[	75	,	0.333333	,	59,	29,	1	]	,				//	19
		[	75.3333	,	0.333333	,	62,	31,	2	]	,				//	19
		[	75.6667	,	0.333333	,	65,	32,	3	]		]	,		//	19
	[	[	76	,	1.98958	,	29,	39,	-5	]	,				//	20
		[	76	,	1.98958	,	41,	34,	-1	]	,				//	20
		[	76	,	0.333333	,	59,	31,	1	]	,				//	20
		[	76	,	1.98958	,	71,	45,	5	]	,				//	20
		[	76.3333	,	0.333333	,	61,	29,	2	]	,				//	20
		[	76.6667	,	0.333333	,	68,	32,	4	]	,				//	20
		[	77	,	0.333333	,	59,	25,	1	]	,				//	20
		[	77.3333	,	0.333333	,	61,	29,	2	]	,				//	20
		[	77.6667	,	0.333333	,	68,	25,	4	]	,				//	20
		[	78	,	1.98958	,	30,	28,	-5	]	,				//	20
		[	78	,	1.98958	,	42,	38,	-1	]	,				//	20
		[	78	,	0.333333	,	57,	26,	1	]	,				//	20
		[	78	,	1.98958	,	69,	60,	5	]	,				//	20
		[	78.3333	,	0.333333	,	61,	25,	2	]	,				//	20
		[	78.6667	,	0.333333	,	66,	31,	4	]	,				//	20
		[	79	,	0.333333	,	57,	36,	1	]	,				//	20
		[	79.3333	,	0.333333	,	61,	23,	2	]	,				//	20
		[	79.6667	,	0.333333	,	66,	38,	4	]		]	,		//	20
	[	[	80	,	1.98958	,	35,	38,	-5	]	,				//	21
		[	80	,	1.98958	,	47,	51,	-1	]	,				//	21
		[	80	,	0.333333	,	55,	48,	1	]	,				//	21
		[	80	,	1.98958	,	67,	67,	5	]	,				//	21
		[	80.3333	,	0.333333	,	59,	31,	2	]	,				//	21
		[	80.6667	,	0.333333	,	62,	42,	3	]	,				//	21
		[	81	,	0.333333	,	55,	48,	1	]	,				//	21
		[	81.3333	,	0.333333	,	59,	36,	2	]	,				//	21
		[	81.6667	,	0.333333	,	62,	58,	3	]	,				//	21
		[	82	,	1.98958	,	36,	36,	-5	]	,				//	21
		[	82	,	1.98958	,	48,	49,	-1	]	,				//	21
		[	82	,	0.333333	,	54,	37,	1	]	,				//	21
		[	82	,	1.98958	,	66,	62,	5	]	,				//	21
		[	82.3333	,	0.333333	,	57,	34,	2	]	,				//	21
		[	82.6667	,	0.333333	,	63,	55,	4	]	,				//	21
		[	83	,	0.333333	,	54,	26,	1	]	,				//	21
		[	83.3333	,	0.333333	,	57,	24,	2	]	,				//	21
		[	83.6667	,	0.333333	,	63,	37,	4	]		]	,		//	21
	[	[	84	,	1.98958	,	37,	29,	-1	]	,				//	22
		[	84	,	0.333333	,	49,	28,	1	]	,				//	22
		[	84	,	1.98958	,	61,	32,	5	]	,				//	22
		[	84.3333	,	0.333333	,	54,	18,	2	]	,				//	22
		[	84.6667	,	0.333333	,	57,	36,	3	]	,				//	22
		[	85	,	0.333333	,	49,	34,	1	]	,				//	22
		[	85.3333	,	0.333333	,	54,	29,	2	]	,				//	22
		[	85.6667	,	0.333333	,	57,	38,	3	]	,				//	22
		[	86	,	0.989583	,	37,	37,	-1	]	,				//	22
		[	86	,	0.333333	,	49,	25,	1	]	,				//	22
		[	86	,	0.989583	,	61,	46,	5	]	,				//	22
		[	86.3333	,	0.333333	,	54,	25,	2	]	,				//	22
		[	86.6667	,	0.333333	,	56,	30,	3	]	,				//	22
		[	87	,	0.333333	,	37,	29,	-1	]	,				//	22
		[	87	,	0.333333	,	49,	23,	1	]	,				//	22
		[	87	,	0.989583	,	61,	34,	5	]	,				//	22
		[	87.3333	,	0.333333	,	53,	31,	2	]	,				//	22
		[	87.6667	,	0.333333	,	56,	40,	3	]		]	,		//	22
	[	[	88	,	3.98958	,	30,	39,	-5	]	,				//	23
		[	88	,	3.98958	,	37,	23,	-2	]	,				//	23
		[	88	,	3.98958	,	42,	26,	-1	]	,				//	23
		[	88	,	0.333333	,	54,	36,	1	]	,				//	23
		[	88.3333	,	0.333333	,	57,	25,	2	]	,				//	23
		[	88.6667	,	0.333333	,	61,	40,	3	]	,				//	23
		[	89	,	0.333333	,	57,	49,	1	]	,				//	23
		[	89.3333	,	0.333333	,	61,	27,	2	]	,				//	23
		[	89.6667	,	0.333333	,	66,	39,	3	]	,				//	23
		[	90	,	0.333333	,	61,	46,	1	]	,				//	23
		[	90.3333	,	0.333333	,	66,	28,	2	]	,				//	23
		[	90.6667	,	0.333333	,	69,	39,	3	]	,				//	23
		[	91	,	0.333333	,	61,	64,	1	]	,				//	23
		[	91	,	0.75	,	73,	71,	5	]	,				//	23
		[	91.3333	,	0.333333	,	66,	32,	2	]	,				//	23
		[	91.6667	,	0.333333	,	69,	29,	3	]	,				//	23
		[	91.75	,	0.25	,	73,	54,	5	]		]	,		//	23
	[	[	92	,	3.98958	,	41,	29,	-5	]	,				//	24
		[	92	,	3.98958	,	49,	27,	-2	]	,				//	24
		[	92	,	3.98958	,	53,	34,	-1	]	,				//	24
		[	92	,	0.34375	,	61,	34,	1	]	,				//	24
		[	92	,	1.98958	,	73,	61,	5	]	,				//	24
		[	92.3333	,	0.333333	,	68,	35,	3	]	,				//	24
		[	92.6667	,	0.333333	,	71,	37,	4	]	,				//	24
		[	93	,	0.333333	,	61,	35,	1	]	,				//	24
		[	93.3333	,	0.333333	,	68,	26,	3	]	,				//	24
		[	93.6667	,	0.333333	,	71,	31,	4	]	,				//	24
		[	94	,	0.333333	,	61,	34,	1	]	,				//	24
		[	94.3333	,	0.333333	,	68,	32,	3	]	,				//	24
		[	94.6667	,	0.333333	,	71,	24,	4	]	,				//	24
		[	95	,	0.333333	,	61,	32,	1	]	,				//	24
		[	95	,	0.75	,	73,	57,	5	]	,				//	24
		[	95.3333	,	0.333333	,	68,	31,	3	]	,				//	24
		[	95.6667	,	0.333333	,	71,	34,	4	]	,				//	24
		[	95.75	,	0.25	,	73,	46,	5	]		]	,		//	24
	[	[	96	,	1.98958	,	42,	31,	-5	]	,				//	25
		[	96	,	1.98958	,	54,	22,	-1	]	,				//	25
		[	96	,	0.333333	,	61,	31,	1	]	,				//	25
		[	96	,	1.98958	,	73,	61,	5	]	,				//	25
		[	96.3333	,	0.333333	,	66,	34,	2	]	,				//	25
		[	96.6667	,	0.333333	,	69,	40,	3	]	,				//	25
		[	97	,	0.989583	,	61,	46,	1	]	,				//	25
		[	97.3333	,	0.333333	,	66,	32,	2	]	,				//	25
		[	97.6667	,	0.333333	,	69,	34,	3	]	,				//	25
		[	98	,	0.989583	,	39,	56,	-5	]	,				//	25
		[	98	,	0.989583	,	51,	51,	-1	]	,				//	25
		[	98	,	0.333333	,	60,	63,	1	]	,				//	25
		[	98	,	0.989583	,	72,	68,	5	]	,				//	25
		[	98.3333	,	0.333333	,	66,	33,	2	]	,				//	25
		[	98.6667	,	0.333333	,	69,	40,	3	]	,				//	25
		[	99	,	0.989583	,	37,	50,	-5	]	,				//	25
		[	99	,	0.989583	,	49,	62,	-1	]	,				//	25
		[	99	,	0.333333	,	61,	69,	1	]	,				//	25
		[	99	,	0.989583	,	73,	81,	5	]	,				//	25
		[	99.3333	,	0.333333	,	66,	37,	2	]	,				//	25
		[	99.6667	,	0.333333	,	69,	37,	3	]		]	,		//	25
	[	[	100	,	2.98958	,	36,	51,	-5	]	,				//	26
		[	100	,	2.98958	,	44,	45,	-2	]	,				//	26
		[	100	,	2.98958	,	48,	51,	-1	]	,				//	26
		[	100	,	0.333333	,	63,	64,	1	]	,				//	26
		[	100	,	2.98958	,	75,	78,	5	]	,				//	26
		[	100.333	,	0.333333	,	66,	35,	2	]	,				//	26
		[	100.667	,	0.333333	,	68,	36,	3	]	,				//	26
		[	101	,	0.333333	,	63,	52,	1	]	,				//	26
		[	101.333	,	0.333333	,	66,	25,	2	]	,				//	26
		[	101.667	,	0.333333	,	68,	46,	3	]	,				//	26
		[	102	,	0.333333	,	63,	43,	1	]	,				//	26
		[	102.333	,	0.333333	,	66,	33,	2	]	,				//	26
		[	102.667	,	0.333333	,	68,	34,	3	]	,				//	26
		[	103	,	0.989583	,	36,	57,	-5	]	,				//	26
		[	103	,	0.989583	,	44,	37,	-2	]	,				//	26
		[	103	,	0.989583	,	48,	56,	-1	]	,				//	26
		[	103	,	0.333333	,	63,	69,	1	]	,				//	26
		[	103	,	0.989583	,	75,	71,	5	]	,				//	26
		[	103.333	,	0.333333	,	66,	34,	2	]	,				//	26
		[	103.667	,	0.333333	,	68,	36,	3	]		]	,		//	26
	[	[	104	,	1.98958	,	37,	28,	-5	]	,				//	27
		[	104	,	1.98958	,	44,	46,	-2	]	,				//	27
		[	104	,	1.98958	,	49,	43,	-1	]	,				//	27
		[	104	,	0.333333	,	64,	56,	1	]	,				//	27
		[	104	,	1.98958	,	76,	71,	5	]	,				//	27
		[	104.333	,	0.333333	,	68,	36,	2	]	,				//	27
		[	104.667	,	0.333333	,	73,	37,	4	]	,				//	27
		[	105	,	0.333333	,	64,	30,	1	]	,				//	27
		[	105.333	,	0.333333	,	68,	25,	2	]	,				//	27
		[	105.667	,	0.333333	,	73,	32,	4	]	,				//	27
		[	106	,	0.989583	,	30,	33,	-5	]	,				//	27
		[	106	,	0.989583	,	42,	27,	-1	]	,				//	27
		[	106	,	0.333333	,	63,	45,	1	]	,				//	27
		[	106	,	0.989583	,	75,	56,	5	]	,				//	27
		[	106.333	,	0.333333	,	66,	44,	2	]	,				//	27
		[	106.667	,	0.333333	,	69,	46,	3	]	,				//	27
		[	107	,	0.989583	,	31,	34,	-5	]	,				//	27
		[	107	,	0.989583	,	43,	46,	-1	]	,				//	27
		[	107	,	0.333333	,	61,	38,	1	]	,				//	27
		[	107	,	0.989583	,	73,	71,	5	]	,				//	27
		[	107.333	,	0.333333	,	64,	56,	2	]	,				//	27
		[	107.667	,	0.333333	,	70,	51,	4	]		]	,		//	27
	[	[	108	,	3.98958	,	32,	38,	-5	]	,				//	28
		[	108	,	3.98958	,	44,	27,	-1	]	,				//	28
		[	108	,	0.989583	,	72,	41,	5	]	,				//	28
		[	108.333	,	0.333333	,	60,	24,	1	]	,				//	28
		[	108.667	,	0.333333	,	63,	33,	2	]	,				//	28
		[	109	,	0.989583	,	68,	58,	4	]	,				//	28
		[	109.333	,	0.333333	,	60,	33,	1	]	,				//	28
		[	109.667	,	0.333333	,	63,	47,	2	]	,				//	28
		[	110	,	0.989583	,	69,	66,	4	]	,				//	28
		[	110.323	,	0.333333	,	60,	29,	1	]	,				//	28
		[	110.667	,	0.333333	,	63,	31,	2	]	,				//	28
		[	111	,	0.989583	,	66,	43,	3	]	,				//	28
		[	111.323	,	0.333333	,	60,	29,	1	]	,				//	28
		[	111.667	,	0.333333	,	63,	37,	2	]		]	,		//	28
	[	[	112	,	3.98958	,	32,	39,	-5	]	,				//	29
		[	112	,	3.98958	,	44,	32,	-1	]	,				//	29
		[	112.333	,	0.333333	,	48,	42,	1	]	,				//	29
		[	112.667	,	0.333333	,	51,	38,	2	]	,				//	29
		[	113	,	0.989583	,	56,	65,	4	]	,				//	29
		[	113.333	,	0.333333	,	48,	46,	1	]	,				//	29
		[	113.667	,	0.333333	,	51,	56,	2	]	,				//	29
		[	114	,	0.989583	,	57,	74,	5	]	,				//	29
		[	114.323	,	0.333333	,	48,	58,	1	]	,				//	29
		[	114.667	,	0.333333	,	51,	43,	2	]	,				//	29
		[	115	,	0.989583	,	54,	50,	3	]	,				//	29
		[	115.333	,	0.333333	,	48,	48,	1	]	,				//	29
		[	115.667	,	0.333333	,	51,	35,	2	]		]	,		//	29
	[	[	116	,	3.98958	,	32,	39,	-5	]	,				//	30
		[	116	,	3.98958	,	44,	37,	-1	]	,				//	30
		[	116	,	0.333333	,	52,	54,	1	]	,				//	30
		[	116.333	,	0.333333	,	64,	40,	5	]	,				//	30
		[	116.656	,	0.333333	,	68,	27,	2	]	,				//	30
		[	117	,	0.989583	,	73,	64,	4	]	,				//	30
		[	117.333	,	0.333333	,	64,	31,	1	]	,				//	30
		[	117.667	,	0.333333	,	68,	27,	2	]	,				//	30
		[	118	,	0.989583	,	76,	70,	5	]	,				//	30
		[	118.333	,	0.333333	,	64,	25,	1	]	,				//	30
		[	118.667	,	0.333333	,	68,	29,	2	]	,				//	30
		[	119	,	0.989583	,	73,	51,	4	]	,				//	30
		[	119.323	,	0.333333	,	64,	28,	1	]	,				//	30
		[	119.667	,	0.333333	,	68,	30,	2	]		]	,		//	30
	[	[	120	,	3.98958	,	32,	42,	-5	]	,				//	31
		[	120	,	3.98958	,	44,	38,	-1	]	,				//	31
		[	120.333	,	0.333333	,	52,	34,	1	]	,				//	31
		[	120.667	,	0.333333	,	56,	30,	2	]	,				//	31
		[	121	,	0.989583	,	61,	59,	4	]	,				//	31
		[	121.333	,	0.333333	,	52,	44,	1	]	,				//	31
		[	121.667	,	0.333333	,	56,	58,	2	]	,				//	31
		[	122	,	0.989583	,	64,	68,	5	]	,				//	31
		[	122.333	,	0.333333	,	52,	37,	1	]	,				//	31
		[	122.667	,	0.333333	,	56,	39,	2	]	,				//	31
		[	123	,	0.989583	,	61,	47,	4	]	,				//	31
		[	123.333	,	0.333333	,	52,	29,	1	]	,				//	31
		[	123.667	,	0.333333	,	56,	32,	2	]		]	,		//	31
	[	[	124	,	3.98958	,	32,	29,	-5	]	,				//	32
		[	124	,	3.98958	,	44,	25,	-1	]	,				//	32
		[	124	,	0.333333	,	51,	45,	1	]	,				//	32
		[	124.333	,	0.333333	,	57,	31,	3	]	,				//	32
		[	124.667	,	0.333333	,	54,	49,	2	]	,				//	32
		[	125	,	0.333333	,	60,	51,	5	]	,				//	32
		[	125.333	,	0.333333	,	57,	44,	1	]	,				//	32
		[	125.667	,	0.333333	,	63,	58,	3	]	,				//	32
		[	126	,	0.333333	,	60,	57,	2	]	,				//	32
		[	126.333	,	0.333333	,	66,	50,	5	]	,				//	32
		[	126.667	,	0.333333	,	63,	48,	1	]	,				//	32
		[	127	,	0.333333	,	69,	56,	3	]	,				//	32
		[	127.333	,	0.333333	,	66,	50,	2	]	,				//	32
		[	127.667	,	0.333333	,	72,	57,	5	]		]	,		//	32
	[	[	128	,	3.98958	,	32,	36,	-5	]	,				//	33
		[	128	,	3.98958	,	44,	33,	-1	]	,				//	33
		[	128	,	0.333333	,	52,	48,	1	]	,				//	33
		[	128.333	,	0.333333	,	61,	34,	4	]	,				//	33
		[	128.667	,	0.333333	,	56,	40,	2	]	,				//	33
		[	129	,	0.333333	,	64,	56,	5	]	,				//	33
		[	129.333	,	0.333333	,	61,	39,	1	]	,				//	33
		[	129.667	,	0.333333	,	68,	62,	3	]	,				//	33
		[	130	,	0.333333	,	64,	46,	2	]	,				//	33
		[	130.333	,	0.333333	,	73,	63,	5	]	,				//	33
		[	130.667	,	0.333333	,	68,	46,	1	]	,				//	33
		[	131	,	0.333333	,	76,	57,	4	]	,				//	33
		[	131.333	,	0.333333	,	73,	26,	2	]	,				//	33
		[	131.667	,	0.333333	,	68,	33,	1	]		]	,		//	33
	[	[	132	,	3.98958	,	32,	40,	-5	]	,				//	34
		[	132	,	3.98958	,	44,	27,	-1	]	,				//	34
		[	132	,	0.333333	,	61,	45,	1	]	,				//	34
		[	132.333	,	0.333333	,	67,	52,	3	]	,				//	34
		[	132.667	,	0.333333	,	64,	53,	2	]	,				//	34
		[	133	,	0.333333	,	70,	56,	5	]	,				//	34
		[	133.333	,	0.333333	,	67,	35,	1	]	,				//	34
		[	133.667	,	0.333333	,	73,	56,	3	]	,				//	34
		[	134	,	0.333333	,	70,	44,	2	]	,				//	34
		[	134.333	,	0.333333	,	76,	66,	5	]	,				//	34
		[	134.667	,	0.333333	,	73,	42,	1	]	,				//	34
		[	135	,	0.333333	,	79,	63,	3	]	,				//	34
		[	135.333	,	0.333333	,	76,	40,	2	]	,				//	34
		[	135.667	,	0.333333	,	82,	33,	5	]		]	,		//	34
	[	[	136	,	11.9896	,	32,	32,	-5	]	,				//	35
		[	136	,	11.9896	,	44,	34,	-1	]	,				//	35
		[	136	,	0.333333	,	66,	29,	1	]	,				//	35
		[	136.333	,	0.333333	,	72,	41,	3	]	,				//	35
		[	136.667	,	0.333333	,	69,	45,	2	]	,				//	35
		[	137	,	0.333333	,	75,	54,	5	]	,				//	35
		[	137.333	,	0.333333	,	72,	33,	1	]	,				//	35
		[	137.667	,	0.333333	,	78,	48,	3	]	,				//	35
		[	138	,	0.333333	,	75,	48,	2	]	,				//	35
		[	138.333	,	0.333333	,	81,	43,	5	]	,				//	35
		[	138.667	,	0.333333	,	78,	45,	1	]	,				//	35
		[	139	,	0.333333	,	84,	68,	3	]	,				//	35
		[	139.333	,	0.333333	,	81,	40,	2	]	,				//	35
		[	139.667	,	0.333333	,	87,	48,	5	]		]	,		//	35
	[	[	140	,	0.333333	,	84,	57,	5	]	,				//	36
		[	140.333	,	0.333333	,	78,	32,	2	]	,				//	36
		[	140.667	,	0.333333	,	81,	28,	3	]	,				//	36
		[	141	,	0.333333	,	75,	47,	1	]	,				//	36
		[	141.333	,	0.333333	,	78,	39,	5	]	,				//	36
		[	141.667	,	0.333333	,	72,	36,	2	]	,				//	36
		[	142	,	0.333333	,	75,	55,	3	]	,				//	36
		[	142.333	,	0.333333	,	69,	34,	1	]	,				//	36
		[	142.667	,	0.333333	,	72,	33,	5	]	,				//	36
		[	143	,	0.333333	,	66,	44,	2	]	,				//	36
		[	143.333	,	0.333333	,	69,	26,	3	]	,				//	36
		[	143.667	,	0.333333	,	63,	31,	1	]		]	,		//	36
	[	[	144	,	0.333333	,	66,	49,	5	]	,				//	37
		[	144.333	,	0.333333	,	60,	39,	2	]	,				//	37
		[	144.667	,	0.333333	,	63,	25,	3	]	,				//	37
		[	145	,	0.333333	,	57,	48,	1	]	,				//	37
		[	145.333	,	0.333333	,	60,	33,	5	]	,				//	37
		[	145.667	,	0.333333	,	54,	43,	2	]	,				//	37
		[	146	,	0.333333	,	57,	30,	3	]	,				//	37
		[	146.333	,	0.666667	,	51,	69,	1	]	,				//	37
		[	146.667	,	0.333333	,	54,	46,	2	]	,				//	37
		[	147	,	0.666667	,	49,	61,	1	]	,				//	37
		[	147.333	,	0.333333	,	54,	40,	2	]	,				//	37
		[	147.667	,	0.333333	,	57,	35,	3	]		]	,		//	37
	[	[	148	,	3.98958	,	32,	35,	-5	]	,				//	38
		[	148	,	3.98958	,	44,	32,	-1	]	,				//	38
		[	148	,	1.98958	,	48,	44,	1	]	,				//	38
		[	148.333	,	0.333333	,	54,	35,	2	]	,				//	38
		[	148.667	,	0.333333	,	56,	44,	3	]	,				//	38
		[	149	,	0.333333	,	57,	62,	4	]	,				//	38
		[	149.333	,	0.333333	,	56,	38,	3	]	,				//	38
		[	149.667	,	0.333333	,	54,	48,	2	]	,				//	38
		[	150	,	0.989583	,	51,	71,	1	]	,				//	38
		[	150.333	,	0.333333	,	54,	38,	2	]	,				//	38
		[	150.667	,	0.333333	,	57,	40,	4	]	,				//	38
		[	151	,	0.989583	,	49,	68,	1	]	,				//	38
		[	151.333	,	0.333333	,	54,	36,	2	]	,				//	38
		[	151.667	,	0.333333	,	57,	32,	4	]		]	,		//	38
	[	[	152	,	3.98958	,	32,	37,	-5	]	,				//	39
		[	152	,	3.98958	,	44,	32,	-1	]	,				//	39
		[	152	,	1.98958	,	48,	52,	1	]	,				//	39
		[	152.333	,	0.333333	,	54,	34,	2	]	,				//	39
		[	152.667	,	0.333333	,	56,	63,	3	]	,				//	39
		[	153	,	0.333333	,	57,	82,	4	]	,				//	39
		[	153.333	,	0.333333	,	56,	56,	3	]	,				//	39
		[	153.667	,	0.333333	,	54,	53,	2	]	,				//	39
		[	154	,	0.989583	,	50,	72,	1	]	,				//	39
		[	154.333	,	0.333333	,	54,	45,	2	]	,				//	39
		[	154.667	,	0.333333	,	57,	36,	4	]	,				//	39
		[	155	,	0.989583	,	49,	64,	1	]	,				//	39
		[	155.333	,	0.333333	,	54,	39,	2	]	,				//	39
		[	155.667	,	0.333333	,	57,	41,	4	]		]	,		//	39
	[	[	156	,	1.98958	,	32,	39,	-5	]	,				//	40
		[	156	,	1.98958	,	44,	31,	-1	]	,				//	40
		[	156	,	1.98958	,	48,	57,	1	]	,				//	40
		[	156.333	,	0.333333	,	54,	25,	2	]	,				//	40
		[	156.667	,	0.333333	,	56,	53,	3	]	,				//	40
		[	157	,	0.333333	,	57,	54,	4	]	,				//	40
		[	157.333	,	0.333333	,	56,	46,	3	]	,				//	40
		[	157.667	,	0.333333	,	54,	50,	2	]	,				//	40
		[	158	,	1.98958	,	33,	38,	-5	]	,				//	40
		[	158	,	1.98958	,	45,	38,	-1	]	,				//	40
		[	158	,	0.989583	,	49,	37,	1	]	,				//	40
		[	158.333	,	0.333333	,	52,	24,	2	]	,				//	40
		[	158.667	,	0.333333	,	61,	44,	5	]	,				//	40
		[	159	,	0.333333	,	49,	32,	1	]	,				//	40
		[	159.333	,	0.333333	,	52,	34,	2	]	,				//	40
		[	159.667	,	0.333333	,	61,	37,	5	]		]	,		//	40
	[	[	160	,	1.98958	,	30,	25,	-5	]	,				//	41
		[	160	,	1.98958	,	42,	27,	-1	]	,				//	41
		[	160	,	0.333333	,	51,	40,	1	]	,				//	41
		[	160.333	,	0.333333	,	57,	36,	3	]	,				//	41
		[	160.667	,	0.333333	,	61,	43,	5	]	,				//	41
		[	161	,	0.333333	,	51,	43,	1	]	,				//	41
		[	161.323	,	0.333333	,	57,	28,	3	]	,				//	41
		[	161.667	,	0.333333	,	61,	25,	5	]	,				//	41
		[	162	,	1.98958	,	32,	33,	-5	]	,				//	41
		[	162	,	1.98958	,	44,	33,	-1	]	,				//	41
		[	162	,	0.333333	,	51,	45,	1	]	,				//	41
		[	162.333	,	0.333333	,	56,	45,	3	]	,				//	41
		[	162.667	,	0.333333	,	60,	34,	5	]	,				//	41
		[	163	,	0.333333	,	51,	34,	1	]	,				//	41
		[	163.333	,	0.333333	,	54,	38,	2	]	,				//	41
		[	163.667	,	0.333333	,	60,	33,	5	]		]	,		//	41
	[	[	164	,	3.98958	,	37,	35,	-5	]	,				//	42
		[	164	,	3.98958	,	44,	37,	-2	]	,				//	42
		[	164	,	3.98958	,	49,	34,	-1	]	,				//	42
		[	164	,	0.333333	,	52,	45,	1	]	,				//	42
		[	164.333	,	0.333333	,	56,	27,	2	]	,				//	42
		[	164.667	,	0.333333	,	61,	25,	4	]	,				//	42
		[	165	,	0.333333	,	56,	45,	1	]	,				//	42
		[	165.333	,	0.333333	,	61,	33,	2	]	,				//	42
		[	165.667	,	0.333333	,	64,	26,	4	]	,				//	42
		[	166	,	0.333333	,	56,	30,	1	]	,				//	42
		[	166.333	,	0.333333	,	61,	32,	2	]	,				//	42
		[	166.667	,	0.333333	,	64,	27,	4	]	,				//	42
		[	167	,	0.333333	,	56,	25,	1	]	,				//	42
		[	167.333	,	0.333333	,	61,	29,	2	]	,				//	42
		[	167.667	,	0.333333	,	64,	27,	4	]	,				//	42
		[	167.74	,	0.0104167	,	68,	60,	5	]		]	,		//	42
	[	[	168	,	3.98958	,	36,	26,	-5	]	,				//	43
		[	168	,	3.98958	,	44,	20,	-2	]	,				//	43
		[	168	,	3.98958	,	48,	24,	-1	]	,				//	43
		[	168	,	0.333333	,	56,	46,	1	]	,				//	43
		[	168	,	2.98958	,	68,	58,	5	]	,				//	43
		[	168.333	,	0.333333	,	63,	35,	3	]	,				//	43
		[	168.667	,	0.333333	,	66,	35,	4	]	,				//	43
		[	169	,	0.333333	,	56,	27,	1	]	,				//	43
		[	169.333	,	0.333333	,	63,	23,	3	]	,				//	43
		[	169.667	,	0.333333	,	66,	30,	4	]	,				//	43
		[	170	,	0.333333	,	56,	25,	1	]	,				//	43
		[	170.333	,	0.333333	,	63,	17,	3	]	,				//	43
		[	170.667	,	0.333333	,	66,	40,	4	]	,				//	43
		[	171	,	0.333333	,	56,	40,	1	]	,				//	43
		[	171	,	0.75	,	68,	53,	5	]	,				//	43
		[	171.333	,	0.333333	,	63,	32,	3	]	,				//	43
		[	171.667	,	0.333333	,	66,	38,	4	]	,				//	43
		[	171.75	,	0.25	,	68,	49,	5	]		]	,		//	43
	[	[	172	,	1.98958	,	37,	20,	-5	]	,				//	44
		[	172	,	1.98958	,	49,	25,	-1	]	,				//	44
		[	172	,	0.333333	,	56,	27,	1	]	,				//	44
		[	172	,	1.98958	,	68,	54,	5	]	,				//	44
		[	172.333	,	0.333333	,	61,	30,	2	]	,				//	44
		[	172.667	,	0.333333	,	64,	37,	4	]	,				//	44
		[	173	,	0.333333	,	56,	46,	1	]	,				//	44
		[	173.333	,	0.333333	,	61,	26,	2	]	,				//	44
		[	173.667	,	0.333333	,	64,	46,	4	]	,				//	44
		[	174	,	1.98958	,	30,	35,	-5	]	,				//	44
		[	174	,	1.98958	,	42,	30,	-1	]	,				//	44
		[	174	,	0.333333	,	57,	39,	1	]	,				//	44
		[	174	,	1.98958	,	69,	59,	5	]	,				//	44
		[	174.333	,	0.333333	,	61,	37,	2	]	,				//	44
		[	174.667	,	0.333333	,	66,	35,	4	]	,				//	44
		[	175	,	0.333333	,	57,	31,	1	]	,				//	44
		[	175.333	,	0.333333	,	61,	29,	2	]	,				//	44
		[	175.667	,	0.333333	,	66,	33,	4	]		]	,		//	44
	[	[	176	,	1.98958	,	35,	37,	-5	]	,				//	45
		[	176	,	1.98958	,	47,	35,	-1	]	,				//	45
		[	176	,	0.333333	,	56,	31,	1	]	,				//	45
		[	176	,	1.98958	,	68,	54,	5	]	,				//	45
		[	176.333	,	0.333333	,	59,	42,	2	]	,				//	45
		[	176.667	,	0.333333	,	64,	44,	4	]	,				//	45
		[	177	,	0.333333	,	56,	34,	1	]	,				//	45
		[	177.333	,	0.333333	,	59,	38,	2	]	,				//	45
		[	177.667	,	0.333333	,	64,	38,	4	]	,				//	45
		[	178	,	1.98958	,	35,	35,	-5	]	,				//	45
		[	178	,	1.98958	,	47,	22,	-1	]	,				//	45
		[	178	,	0.333333	,	57,	48,	1	]	,				//	45
		[	178	,	0.989583	,	66,	61,	5	]	,				//	45
		[	178.333	,	0.333333	,	59,	32,	2	]	,				//	45
		[	178.667	,	0.333333	,	63,	30,	4	]	,				//	45
		[	178.927	,	0.40625	,	57,	35,	1	]	,				//	45
		[	179	,	0.989583	,	71,	56,	5	]	,				//	45
		[	179.333	,	0.333333	,	59,	26,	1	]	,				//	45
		[	179.667	,	0.333333	,	63,	50,	2	]		]	,		//	45
	[	[	180	,	3.98958	,	40,	41,	-5	]	,				//	46
		[	180	,	3.98958	,	52,	32,	-1	]	,				//	46
		[	180	,	0.333333	,	56,	20,	0	]	,				//	46
		[	180	,	0.666667	,	64,	40,	0	]	,				//	46
		[	180.333	,	0.333333	,	59,	52,	0	]	,				//	46
		[	180.667	,	0.333333	,	64,	42,	0	]	,				//	46
		[	181	,	0.333333	,	59,	52,	0	]	,				//	46
		[	181.333	,	0.333333	,	64,	35,	0	]	,				//	46
		[	181.667	,	0.333333	,	68,	35,	0	]	,				//	46
		[	182	,	0.333333	,	59,	52,	0	]	,				//	46
		[	182.333	,	0.333333	,	64,	32,	0	]	,				//	46
		[	182.667	,	0.333333	,	68,	32,	0	]	,				//	46
		[	183	,	0.333333	,	59,	53,	0	]	,				//	46
		[	183	,	0.75	,	71,	63,	0	]	,				//	46
		[	183.333	,	0.333333	,	64,	34,	0	]	,				//	46
		[	183.667	,	0.333333	,	68,	39,	0	]	,				//	46
		[	183.75	,	0.25	,	71,	36,	0	]		]	,		//	46
	[	[	184	,	3.98958	,	39,	33,	0	]	,				//	47
		[	184	,	3.98958	,	51,	40,	0	]	,				//	47
		[	184	,	0.333333	,	59,	40,	0	]	,				//	47
		[	184	,	2.98958	,	71,	57,	0	]	,				//	47
		[	184.333	,	0.333333	,	66,	27,	0	]	,				//	47
		[	184.667	,	0.333333	,	69,	21,	0	]	,				//	47
		[	185	,	0.333333	,	59,	42,	0	]	,				//	47
		[	185.333	,	0.333333	,	66,	22,	0	]	,				//	47
		[	185.667	,	0.333333	,	69,	26,	0	]	,				//	47
		[	186	,	0.333333	,	59,	33,	0	]	,				//	47
		[	186.333	,	0.333333	,	66,	25,	0	]	,				//	47
		[	186.667	,	0.333333	,	69,	32,	0	]	,				//	47
		[	187	,	0.333333	,	59,	44,	0	]	,				//	47
		[	187	,	0.75	,	71,	68,	0	]	,				//	47
		[	187.333	,	0.333333	,	66,	28,	0	]	,				//	47
		[	187.667	,	0.333333	,	69,	33,	0	]	,				//	47
		[	187.75	,	0.25	,	71,	49,	0	]		]	,		//	47
	[	[	188	,	1.98958	,	40,	42,	0	]	,				//	48
		[	188	,	1.98958	,	52,	36,	0	]	,				//	48
		[	188	,	0.333333	,	59,	39,	0	]	,				//	48
		[	188	,	1.98958	,	71,	56,	0	]	,				//	48
		[	188.323	,	0.333333	,	64,	34,	0	]	,				//	48
		[	188.667	,	0.333333	,	68,	36,	0	]	,				//	48
		[	189	,	0.333333	,	59,	47,	0	]	,				//	48
		[	189.323	,	0.333333	,	64,	40,	0	]	,				//	48
		[	189.667	,	0.333333	,	68,	27,	0	]	,				//	48
		[	190	,	0.989583	,	39,	58,	0	]	,				//	48
		[	190	,	0.989583	,	51,	57,	0	]	,				//	48
		[	190	,	0.333333	,	60,	70,	0	]	,				//	48
		[	190	,	0.989583	,	72,	75,	0	]	,				//	48
		[	190.333	,	0.333333	,	66,	33,	0	]	,				//	48
		[	190.667	,	0.333333	,	68,	51,	0	]	,				//	48
		[	191	,	0.989583	,	37,	57,	0	]	,				//	48
		[	191	,	0.989583	,	49,	65,	0	]	,				//	48
		[	191	,	0.34375	,	61,	49,	0	]	,				//	48
		[	191	,	0.989583	,	73,	78,	0	]	,				//	48
		[	191.333	,	0.333333	,	64,	52,	0	]	,				//	48
		[	191.667	,	0.333333	,	68,	55,	0	]		]	,		//	48
	[	[	192	,	1.98958	,	36,	51,	0	]	,				//	49
		[	192	,	1.98958	,	44,	40,	0	]	,				//	49
		[	192	,	1.98958	,	48,	60,	0	]	,				//	49
		[	192	,	0.333333	,	63,	65,	0	]	,				//	49
		[	192	,	1.98958	,	75,	78,	0	]	,				//	49
		[	192.333	,	0.333333	,	66,	42,	0	]	,				//	49
		[	192.667	,	0.333333	,	68,	42,	0	]	,				//	49
		[	193	,	0.333333	,	63,	49,	0	]	,				//	49
		[	193.333	,	0.333333	,	66,	39,	0	]	,				//	49
		[	193.667	,	0.333333	,	68,	46,	0	]	,				//	49
		[	194	,	0.989583	,	37,	38,	0	]	,				//	49
		[	194	,	0.989583	,	44,	43,	0	]	,				//	49
		[	194	,	0.989583	,	49,	36,	0	]	,				//	49
		[	194	,	0.333333	,	64,	59,	0	]	,				//	49
		[	194	,	1.98958	,	76,	80,	0	]	,				//	49
		[	194.333	,	0.333333	,	68,	34,	0	]	,				//	49
		[	194.667	,	0.333333	,	73,	36,	0	]	,				//	49
		[	195	,	0.333333	,	64,	36,	0	]	,				//	49
		[	195.333	,	0.333333	,	68,	27,	0	]	,				//	49
		[	195.667	,	0.333333	,	73,	31,	0	]		]	,		//	49
	[	[	196	,	1.98958	,	30,	34,	0	]	,				//	50
		[	196	,	1.98958	,	42,	17,	0	]	,				//	50
		[	196	,	0.333333	,	62,	37,	0	]	,				//	50
		[	196	,	1.98958	,	74,	54,	0	]	,				//	50
		[	196.333	,	0.333333	,	66,	18,	0	]	,				//	50
		[	196.667	,	0.333333	,	69,	19,	0	]	,				//	50
		[	197	,	0.333333	,	62,	29,	0	]	,				//	50
		[	197.333	,	0.333333	,	66,	36,	0	]	,				//	50
		[	197.667	,	0.333333	,	69,	25,	0	]	,				//	50
		[	198	,	1.98958	,	32,	26,	0	]	,				//	50
		[	198	,	1.98958	,	44,	30,	0	]	,				//	50
		[	198	,	0.333333	,	60,	32,	0	]	,				//	50
		[	198	,	1.98958	,	72,	49,	0	]	,				//	50
		[	198.333	,	0.333333	,	66,	25,	0	]	,				//	50
		[	198.667	,	0.333333	,	68,	30,	0	]	,				//	50
		[	199	,	0.333333	,	60,	33,	0	]	,				//	50
		[	199.333	,	0.333333	,	66,	26,	0	]	,				//	50
		[	199.667	,	0.333333	,	68,	34,	0	]		]	,		//	50
	[	[	200	,	4.98958	,	37,	29,	0	]	,				//	51
		[	200	,	4.98958	,	49,	25,	0	]	,				//	51
		[	200	,	0.333333	,	61,	33,	0	]	,				//	51
		[	200	,	2.98958	,	73,	58,	0	]	,				//	51
		[	200.333	,	0.333333	,	64,	28,	0	]	,				//	51
		[	200.667	,	0.333333	,	68,	29,	0	]	,				//	51
		[	201	,	0.333333	,	61,	28,	0	]	,				//	51
		[	201.333	,	0.333333	,	64,	32,	0	]	,				//	51
		[	201.667	,	0.333333	,	68,	31,	0	]	,				//	51
		[	202	,	0.333333	,	61,	31,	0	]	,				//	51
		[	202.333	,	0.333333	,	65,	25,	0	]	,				//	51
		[	202.667	,	0.333333	,	68,	34,	0	]	,				//	51
		[	203	,	0.333333	,	61,	45,	0	]	,				//	51
		[	203	,	0.989583	,	73,	71,	0	]	,				//	51
		[	203.333	,	0.333333	,	65,	28,	0	]	,				//	51
		[	203.667	,	0.333333	,	68,	43,	0	]	,				//	51
		[	203.917	,	0.40625	,	61,	38,	0	]		]	,		//	51
	[	[	204	,	2.98958	,	74,	64,	0	]	,				//	52
		[	204.333	,	0.333333	,	66,	39,	0	]	,				//	52
		[	204.667	,	0.333333	,	69,	31,	0	]	,				//	52
		[	205	,	0.989583	,	42,	49,	0	]	,				//	52
		[	205	,	0.989583	,	54,	48,	0	]	,				//	52
		[	205	,	0.333333	,	61,	49,	0	]	,				//	52
		[	205.333	,	0.333333	,	66,	42,	0	]	,				//	52
		[	205.667	,	0.333333	,	69,	25,	0	]	,				//	52
		[	206	,	0.989583	,	45,	79,	0	]	,				//	52
		[	206	,	0.989583	,	57,	70,	0	]	,				//	52
		[	206	,	0.333333	,	61,	57,	0	]	,				//	52
		[	206.333	,	0.333333	,	66,	28,	0	]	,				//	52
		[	206.667	,	0.333333	,	69,	41,	0	]	,				//	52
		[	207	,	0.989583	,	42,	31,	0	]	,				//	52
		[	207	,	0.989583	,	54,	31,	0	]	,				//	52
		[	207	,	0.333333	,	61,	44,	0	]	,				//	52
		[	207	,	0.989583	,	72,	60,	0	]	,				//	52
		[	207.333	,	0.333333	,	66,	29,	0	]	,				//	52
		[	207.667	,	0.333333	,	69,	35,	0	]		]	,		//	52
	[	[	208	,	4.98958	,	37,	27,	0	]	,				//	53
		[	208	,	4.98958	,	49,	34,	0	]	,				//	53
		[	208	,	0.333333	,	61,	33,	0	]	,				//	53
		[	208	,	2.98958	,	73,	46,	0	]	,				//	53
		[	208.333	,	0.333333	,	65,	27,	0	]	,				//	53
		[	208.667	,	0.333333	,	68,	34,	0	]	,				//	53
		[	209	,	0.333333	,	61,	30,	0	]	,				//	53
		[	209.333	,	0.333333	,	65,	27,	0	]	,				//	53
		[	209.667	,	0.333333	,	68,	35,	0	]	,				//	53
		[	210	,	0.333333	,	61,	30,	0	]	,				//	53
		[	210.333	,	0.333333	,	65,	26,	0	]	,				//	53
		[	210.667	,	0.333333	,	68,	37,	0	]	,				//	53
		[	211	,	0.333333	,	61,	49,	0	]	,				//	53
		[	211	,	0.989583	,	73,	65,	0	]	,				//	53
		[	211.333	,	0.333333	,	65,	34,	0	]	,				//	53
		[	211.667	,	0.333333	,	68,	37,	0	]	,				//	53
		[	211.917	,	0.40625	,	61,	44,	0	]		]	,		//	53
	[	[	212	,	2.98958	,	74,	88,	0	]	,				//	54
		[	212.333	,	0.333333	,	66,	38,	0	]	,				//	54
		[	212.667	,	0.333333	,	69,	26,	0	]	,				//	54
		[	213	,	0.989583	,	42,	50,	0	]	,				//	54
		[	213	,	0.989583	,	54,	44,	0	]	,				//	54
		[	213	,	0.333333	,	61,	45,	0	]	,				//	54
		[	213.333	,	0.333333	,	66,	23,	0	]	,				//	54
		[	213.667	,	0.333333	,	69,	36,	0	]	,				//	54
		[	214	,	0.989583	,	45,	72,	0	]	,				//	54
		[	214	,	0.989583	,	57,	60,	0	]	,				//	54
		[	214	,	0.333333	,	61,	59,	0	]	,				//	54
		[	214.333	,	0.333333	,	66,	35,	0	]	,				//	54
		[	214.667	,	0.333333	,	69,	46,	0	]	,				//	54
		[	215	,	0.989583	,	42,	39,	0	]	,				//	54
		[	215	,	0.989583	,	54,	30,	0	]	,				//	54
		[	215	,	0.333333	,	61,	36,	0	]	,				//	54
		[	215	,	0.989583	,	72,	58,	0	]	,				//	54
		[	215.333	,	0.333333	,	66,	31,	0	]	,				//	54
		[	215.667	,	0.333333	,	69,	33,	0	]		]	,		//	54
	[	[	216	,	1.98958	,	37,	35,	0	]	,				//	55
		[	216	,	1.98958	,	49,	25,	0	]	,				//	55
		[	216	,	0.333333	,	61,	31,	0	]	,				//	55
		[	216	,	1.98958	,	73,	46,	0	]	,				//	55
		[	216.333	,	0.333333	,	65,	31,	0	]	,				//	55
		[	216.667	,	0.333333	,	68,	27,	0	]	,				//	55
		[	217	,	0.333333	,	61,	34,	0	]	,				//	55
		[	217.333	,	0.333333	,	65,	26,	0	]	,				//	55
		[	217.667	,	0.333333	,	68,	37,	0	]	,				//	55
		[	218	,	1.98958	,	30,	28,	0	]	,				//	55
		[	218	,	1.98958	,	42,	26,	0	]	,				//	55
		[	218	,	0.333333	,	61,	18,	0	]	,				//	55
		[	218	,	1.98958	,	73,	57,	0	]	,				//	55
		[	218.333	,	0.333333	,	66,	28,	0	]	,				//	55
		[	218.667	,	0.333333	,	69,	29,	0	]	,				//	55
		[	219	,	0.333333	,	61,	25,	0	]	,				//	55
		[	219.333	,	0.333333	,	66,	26,	0	]	,				//	55
		[	219.667	,	0.333333	,	69,	27,	0	]		]	,		//	55
	[	[	220	,	2.98958	,	39,	38,	0	]	,				//	56
		[	220	,	2.98958	,	51,	29,	0	]	,				//	56
		[	220	,	0.333333	,	59,	32,	0	]	,				//	56
		[	220	,	2.98958	,	71,	60,	0	]	,				//	56
		[	220.333	,	0.333333	,	66,	25,	0	]	,				//	56
		[	220.667	,	0.333333	,	69,	24,	0	]	,				//	56
		[	221	,	0.333333	,	59,	45,	0	]	,				//	56
		[	221.333	,	0.333333	,	66,	22,	0	]	,				//	56
		[	221.667	,	0.333333	,	69,	33,	0	]	,				//	56
		[	222	,	0.333333	,	59,	32,	0	]	,				//	56
		[	222.333	,	0.333333	,	66,	23,	0	]	,				//	56
		[	222.667	,	0.333333	,	69,	39,	0	]	,				//	56
		[	223	,	0.989583	,	40,	32,	0	]	,				//	56
		[	223	,	0.989583	,	52,	24,	0	]	,				//	56
		[	223	,	0.333333	,	59,	37,	0	]	,				//	56
		[	223	,	0.989583	,	71,	55,	0	]	,				//	56
		[	223.333	,	0.333333	,	64,	42,	0	]	,				//	56
		[	223.667	,	0.333333	,	68,	44,	0	]		]	,		//	56
	[	[	224	,	0.989583	,	37,	37,	0	]	,				//	57
		[	224	,	0.989583	,	49,	39,	0	]	,				//	57
		[	224	,	0.333333	,	57,	51,	0	]	,				//	57
		[	224	,	0.989583	,	69,	60,	0	]	,				//	57
		[	224.333	,	0.333333	,	64,	33,	0	]	,				//	57
		[	224.667	,	0.333333	,	68,	33,	0	]	,				//	57
		[	225	,	0.989583	,	39,	39,	0	]	,				//	57
		[	225	,	0.989583	,	51,	38,	0	]	,				//	57
		[	225	,	0.333333	,	57,	40,	0	]	,				//	57
		[	225	,	0.989583	,	69,	57,	0	]	,				//	57
		[	225.333	,	0.333333	,	63,	44,	0	]	,				//	57
		[	225.667	,	0.333333	,	66,	40,	0	]	,				//	57
		[	226	,	0.989583	,	36,	39,	0	]	,				//	57
		[	226	,	0.989583	,	48,	35,	0	]	,				//	57
		[	226	,	0.333333	,	56,	38,	0	]	,				//	57
		[	226	,	0.989583	,	68,	68,	0	]	,				//	57
		[	226.333	,	0.333333	,	63,	34,	0	]	,				//	57
		[	226.667	,	0.333333	,	66,	37,	0	]	,				//	57
		[	227	,	0.989583	,	37,	36,	0	]	,				//	57
		[	227	,	0.989583	,	49,	33,	0	]	,				//	57
		[	227	,	0.333333	,	56,	38,	0	]	,				//	57
		[	227	,	0.989583	,	68,	57,	0	]	,				//	57
		[	227.333	,	0.333333	,	61,	38,	0	]	,				//	57
		[	227.667	,	0.333333	,	64,	39,	0	]		]	,		//	57
	[	[	228	,	1.98958	,	33,	29,	0	]	,				//	58
		[	228	,	1.98958	,	45,	34,	0	]	,				//	58
		[	228	,	0.333333	,	54,	48,	0	]	,				//	58
		[	228	,	1.98958	,	66,	56,	0	]	,				//	58
		[	228.333	,	0.333333	,	61,	33,	0	]	,				//	58
		[	228.667	,	0.333333	,	63,	34,	0	]	,				//	58
		[	229	,	0.333333	,	54,	46,	0	]	,				//	58
		[	229.333	,	0.333333	,	61,	37,	0	]	,				//	58
		[	229.667	,	0.333333	,	63,	36,	0	]	,				//	58
		[	230	,	0.989583	,	32,	44,	0	]	,				//	58
		[	230	,	0.989583	,	44,	40,	0	]	,				//	58
		[	230	,	0.333333	,	56,	54,	0	]	,				//	58
		[	230	,	0.989583	,	68,	67,	0	]	,				//	58
		[	230.333	,	0.333333	,	61,	34,	0	]	,				//	58
		[	230.667	,	0.333333	,	63,	33,	0	]	,				//	58
		[	231	,	0.989583	,	30,	45,	0	]	,				//	58
		[	231	,	0.989583	,	42,	44,	0	]	,				//	58
		[	231	,	0.333333	,	57,	56,	0	]	,				//	58
		[	231	,	0.989583	,	69,	70,	0	]	,				//	58
		[	231.333	,	0.333333	,	61,	35,	0	]	,				//	58
		[	231.667	,	0.333333	,	63,	39,	0	]		]	,		//	58
	[	[	232	,	1.98958	,	32,	43,	0	]	,				//	59
		[	232	,	1.98958	,	44,	31,	0	]	,				//	59
		[	232	,	0.333333	,	56,	45,	0	]	,				//	59
		[	232	,	1.98958	,	68,	61,	0	]	,				//	59
		[	232.333	,	0.333333	,	61,	31,	0	]	,				//	59
		[	232.667	,	0.333333	,	64,	31,	0	]	,				//	59
		[	233	,	0.333333	,	56,	32,	0	]	,				//	59
		[	233.333	,	0.333333	,	61,	26,	0	]	,				//	59
		[	233.667	,	0.333333	,	64,	36,	0	]	,				//	59
		[	234	,	1.98958	,	32,	35,	0	]	,				//	59
		[	234	,	1.98958	,	44,	30,	0	]	,				//	59
		[	234	,	0.333333	,	54,	13,	0	]	,				//	59
		[	234	,	0.989583	,	68,	44,	0	]	,				//	59
		[	234.333	,	0.333333	,	60,	22,	0	]	,				//	59
		[	234.667	,	0.333333	,	63,	33,	0	]	,				//	59
		[	235	,	0.333333	,	54,	42,	0	]	,				//	59
		[	235.333	,	0.333333	,	60,	27,	0	]	,				//	59
		[	235.667	,	0.333333	,	63,	43,	0	]		]	,		//	59
	[	[	236	,	3.98958	,	37,	33,	0	]	,				//	60
		[	236	,	2.98958	,	44,	27,	0	]	,				//	60
		[	236	,	0.333333	,	52,	39,	0	]	,				//	60
		[	236.333	,	0.333333	,	56,	34,	0	]	,				//	60
		[	236.667	,	0.322917	,	61,	42,	0	]	,				//	60
		[	236.667	,	0.333333	,	61,	42,	0	]	,				//	60
		[	237	,	0.333333	,	56,	44,	0	]	,				//	60
		[	237.333	,	0.333333	,	61,	28,	0	]	,				//	60
		[	237.667	,	0.333333	,	64,	38,	0	]	,				//	60
		[	238	,	0.333333	,	56,	36,	0	]	,				//	60
		[	238.333	,	0.333333	,	61,	32,	0	]	,				//	60
		[	238.667	,	0.333333	,	64,	38,	0	]	,				//	60
		[	239	,	0.75	,	44,	61,	0	]	,				//	60
		[	239	,	0.333333	,	56,	43,	0	]	,				//	60
		[	239.333	,	0.333333	,	61,	37,	0	]	,				//	60
		[	239.667	,	0.333333	,	64,	36,	0	]	,				//	60
		[	239.75	,	0.25	,	44,	61,	0	]		]	,		//	60
	[	[	240	,	3.98958	,	36,	52,	0	]	,				//	61
		[	240	,	2.98958	,	44,	46,	0	]	,				//	61
		[	240	,	0.333333	,	56,	51,	0	]	,				//	61
		[	240.333	,	0.333333	,	63,	38,	0	]	,				//	61
		[	240.667	,	0.333333	,	66,	36,	0	]	,				//	61
		[	241	,	0.333333	,	56,	46,	0	]	,				//	61
		[	241.333	,	0.333333	,	63,	28,	0	]	,				//	61
		[	241.667	,	0.333333	,	66,	30,	0	]	,				//	61
		[	242	,	0.333333	,	56,	44,	0	]	,				//	61
		[	242.333	,	0.333333	,	63,	34,	0	]	,				//	61
		[	242.667	,	0.333333	,	66,	30,	0	]	,				//	61
		[	243	,	0.75	,	44,	64,	0	]	,				//	61
		[	243	,	0.333333	,	56,	56,	0	]	,				//	61
		[	243.333	,	0.333333	,	63,	34,	0	]	,				//	61
		[	243.667	,	0.333333	,	66,	39,	0	]	,				//	61
		[	243.75	,	0.25	,	44,	48,	0	]		]	,		//	61
	[	[	244	,	3.98958	,	37,	43,	0	]	,				//	62
		[	244	,	2.98958	,	44,	55,	0	]	,				//	62
		[	244	,	0.333333	,	56,	45,	0	]	,				//	62
		[	244.333	,	0.333333	,	64,	51,	0	]	,				//	62
		[	244.667	,	0.333333	,	61,	33,	0	]	,				//	62
		[	245	,	0.333333	,	68,	65,	0	]	,				//	62
		[	245.333	,	0.333333	,	64,	42,	0	]	,				//	62
		[	245.667	,	0.333333	,	73,	61,	0	]	,				//	62
		[	246	,	0.333333	,	68,	53,	0	]	,				//	62
		[	246.333	,	0.333333	,	76,	74,	0	]	,				//	62
		[	246.667	,	0.333333	,	73,	55,	0	]	,				//	62
		[	247	,	0.75	,	44,	69,	0	]	,				//	62
		[	247	,	0.333333	,	80,	73,	0	]	,				//	62
		[	247.333	,	0.333333	,	76,	52,	0	]	,				//	62
		[	247.667	,	0.333333	,	73,	56,	0	]	,				//	62
		[	247.75	,	0.25	,	44,	62,	0	]		]	,		//	62
	[	[	248	,	2.98958	,	32,	60,	0	]	,				//	63
		[	248	,	2.98958	,	44,	60,	0	]	,				//	63
		[	248	,	0.333333	,	72,	66,	0	]	,				//	63
		[	248.333	,	0.333333	,	75,	52,	0	]	,				//	63
		[	248.667	,	0.333333	,	69,	46,	0	]	,				//	63
		[	249	,	0.333333	,	72,	64,	0	]	,				//	63
		[	249.333	,	0.333333	,	66,	40,	0	]	,				//	63
		[	249.667	,	0.333333	,	69,	39,	0	]	,				//	63
		[	250	,	0.333333	,	63,	57,	0	]	,				//	63
		[	250.333	,	0.333333	,	66,	45,	0	]	,				//	63
		[	250.667	,	0.333333	,	57,	52,	0	]	,				//	63
		[	251	,	0.75	,	44,	49,	0	]	,				//	63
		[	251	,	0.333333	,	60,	67,	0	]	,				//	63
		[	251.333	,	0.333333	,	56,	36,	0	]	,				//	63
		[	251.667	,	0.333333	,	54,	56,	0	]	,				//	63
		[	251.75	,	0.25	,	44,	51,	0	]		]	,		//	63
	[	[	252	,	2.98958	,	37,	44,	0	]	,				//	64
		[	252	,	2.98958	,	44,	52,	0	]	,				//	64
		[	252	,	0.333333	,	52,	51,	0	]	,				//	64
		[	252	,	0.333333	,	61,	58,	0	]	,				//	64
		[	252.333	,	0.333333	,	64,	61,	0	]	,				//	64
		[	252.667	,	0.333333	,	61,	45,	0	]	,				//	64
		[	253	,	0.333333	,	68,	62,	0	]	,				//	64
		[	253.333	,	0.333333	,	64,	53,	0	]	,				//	64
		[	253.667	,	0.333333	,	73,	67,	0	]	,				//	64
		[	254	,	0.333333	,	68,	42,	0	]	,				//	64
		[	254.333	,	0.333333	,	76,	74,	0	]	,				//	64
		[	254.667	,	0.333333	,	73,	48,	0	]	,				//	64
		[	255	,	0.75	,	44,	61,	0	]	,				//	64
		[	255	,	0.333333	,	80,	72,	0	]	,				//	64
		[	255.333	,	0.333333	,	76,	62,	0	]	,				//	64
		[	255.667	,	0.333333	,	73,	56,	0	]	,				//	64
		[	255.75	,	0.25	,	44,	64,	0	]		]	,		//	64
	[	[	256	,	2.98958	,	32,	54,	0	]	,				//	65
		[	256	,	2.98958	,	44,	61,	0	]	,				//	65
		[	256	,	0.333333	,	72,	64,	0	]	,				//	65
		[	256.333	,	0.333333	,	75,	46,	0	]	,				//	65
		[	256.667	,	0.333333	,	69,	44,	0	]	,				//	65
		[	257	,	0.333333	,	72,	55,	0	]	,				//	65
		[	257.333	,	0.333333	,	66,	50,	0	]	,				//	65
		[	257.667	,	0.333333	,	69,	49,	0	]	,				//	65
		[	258	,	0.333333	,	63,	62,	0	]	,				//	65
		[	258.333	,	0.333333	,	66,	49,	0	]	,				//	65
		[	258.667	,	0.333333	,	57,	62,	0	]	,				//	65
		[	259	,	0.75	,	44,	56,	0	]	,				//	65
		[	259	,	0.333333	,	60,	63,	0	]	,				//	65
		[	259.333	,	0.333333	,	56,	52,	0	]	,				//	65
		[	259.667	,	0.333333	,	54,	47,	0	]	,				//	65
		[	259.75	,	0.25	,	44,	51,	0	]		]	,		//	65
	[	[	260	,	7.98958	,	37,	47,	0	]	,				//	66
		[	260	,	1.98958	,	44,	46,	0	]	,				//	66
		[	260	,	0.333333	,	52,	49,	0	]	,				//	66
		[	260.333	,	0.333333	,	56,	45,	0	]	,				//	66
		[	260.667	,	0.322917	,	61,	51,	0	]	,				//	66
		[	260.667	,	0.333333	,	61,	51,	0	]	,				//	66
		[	261	,	0.333333	,	64,	49,	0	]	,				//	66
		[	261.333	,	0.333333	,	61,	37,	0	]	,				//	66
		[	261.667	,	0.333333	,	56,	30,	0	]	,				//	66
		[	262	,	1.98958	,	49,	54,	0	]	,				//	66
		[	262.333	,	0.333333	,	52,	29,	0	]	,				//	66
		[	262.667	,	0.333333	,	56,	33,	0	]	,				//	66
		[	263	,	0.333333	,	61,	49,	0	]	,				//	66
		[	263.333	,	0.333333	,	56,	40,	0	]	,				//	66
		[	263.667	,	0.333333	,	52,	34,	0	]		]	,		//	66
	[	[	264	,	0.989583	,	44,	38,	0	]	,				//	67
		[	264.333	,	0.333333	,	49,	38,	0	]	,				//	67
		[	264.667	,	0.333333	,	52,	35,	0	]	,				//	67
		[	265	,	0.333333	,	56,	51,	0	]	,				//	67
		[	265.333	,	0.333333	,	52,	37,	0	]	,				//	67
		[	265.667	,	0.333333	,	49,	36,	0	]	,				//	67
		[	266	,	0.333333	,	44,	33,	0	]	,				//	67
		[	266.333	,	0.333333	,	49,	36,	0	]	,				//	67
		[	266.667	,	0.333333	,	44,	40,	0	]	,				//	67
		[	267	,	0.333333	,	40,	44,	0	]	,				//	67
		[	267.333	,	0.333333	,	44,	39,	0	]	,				//	67
		[	267.667	,	0.333333	,	40,	41,	0	]		]	,		//	67
	[	[	268	,	1.98958	,	37,	43,	0	]	,				//	68
		[	270	,	1.98958	,	37,	33,	0	]	,				//	68
		[	270	,	1.98958	,	44,	33,	0	]	,				//	68
		[	270	,	1.98958	,	49,	27,	0	]	,				//	68
		[	270	,	1.98958	,	52,	34,	0	]	,				//	68
		[	270	,	1.98958	,	56,	51,	0	]	,				//	68
		[	270	,	1.98958	,	61,	49,	0	]		]	,		//	68
	[	[	272	,	3.98958	,	37,	22,	0	]	,				//	69
		[	272	,	3.98958	,	44,	29,	0	]	,				//	69
		[	272	,	3.98958	,	49,	23,	0	]	,				//	69
		[	272	,	3.98958	,	52,	18,	0	]	,				//	69
		[	272	,	3.98958	,	56,	38,	0	]	,				//	69
		[	272	,	3.98958	,	61,	33,	0	]		]			//	69
		]														
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																/* --- ================ KEY PRESS ================== */

$(document).keydown(function(e){
	
	if (e.keyCode == 27) // Esc
	{
		$("#cancel").click();
	}
	if (feedbackFormDisplayed)
	{
		return;
	}
	if (e.keyCode == 37) // Left arrow
	{ 
		updatePosition("-");
	}
	else if (e.keyCode == 39) // Right arrow
	{ 
		updatePosition("+");
	}
	if (e.keyCode == 38) // Up arrow
	{
		updateTempo("tempo","+");
	}
	else if (e.keyCode == 40) // Down arrow
	{
		updateTempo("tempo","-");
	}
	else if (e.keyCode == 191) // ?
	{
		updateEndMeasure("+");
	}
	else if (e.keyCode == 190) // . >
	{
		updateEndMeasure("-");
	}
	else if (e.keyCode == 90) // z
	{
		updateStartMeasure("-");
	}
	else if (e.keyCode == 88) // . x
	{
		updateStartMeasure("+");
	}
	else if (e.keyCode == 32) // Space
	{
		if (didPressPlayBtn)
		{
			didPressPauseButton();
		}
		else
		{
			didPressPlayButton(STARTPLAY);		
		}
	}
	else if (e.keyCode == 13) // Enter
	{
		$('#startMeasure').blur();
		$('#endMeasure').blur();
	}
	else if (e.keyCode == 76) // l
	{
		$('input[name=hand][value=left]').prop("checked",true);
		didSelectHand('left');
	}
	else if (e.keyCode == 82) // r
	{
		$('input[name=hand][value=right]').prop("checked",true);
		didSelectHand('right');
	}
	else if (e.keyCode == 66) // b
	{
		$('input[name=hand][value=both]').prop("checked",true);	
	}
	else if (e.keyCode == 83) // s
	{
		didPressPauseButton(STOP);	
	}
	else if (e.keyCode == 84) // t
	{
		repeatToggle();
	}
});/* --- ================ PIANO DRAW ================== */

var info = {
	'measureControl' : "Press LEFT and RIGHT keys to change the Start Measure.<br>Press UP and DOWN keys to change the End Measure.<br>Press T to toggle between repeat and NO repeat.",
	'playControl'    : "Press SPACE key to toggle between Play and Pause.<br>Press S to stop.",
	'tempoControl'   : "Press < to decrease tempo.<br>Press > to increase tempo.",
	'handControl'    : "Press L for left hand only.<br>Press R for right hand only.<br>Press B to display both hands.",
	'repeatControl'  : "<br>Press 1 to repeat one measure.<br>Press 2 to repeat two measures."
};

function drawScreen()
{
	drawPiano();
	drawControls();
	feedbackForm();
	playDisplay();
	display();
}

function display()
{
	$("#loading").css("display","none");
	$("#controls").css("display","");
	$("#pianoWrapper").css("display","");
	$("#chair").css("display","");
	$("#feedback").css("display","");
}

function drawPiano()
{
	whiteKeySpacing = 2;
	// White Key - 15x73
	screenWidth = screen.width;

	userAgent = navigator.userAgent;
	if(userAgent.indexOf("iPhone") !== -1)
	{
		screenWidth = 1000;
	}
	else if(userAgent.indexOf("iPad") !== -1)
	{
		screenWidth = 1000;
	}
	
	whiteKeyWidth = screenWidth/65;
	
	whiteKeyHeight = Math.floor(whiteKeyWidth * 73/15);
	whiteKeyOffset = whiteKeyWidth/3;
	
	// White Key Label
	whiteKeyLabelTop = Math.floor(whiteKeyHeight*0.70);
	whiteKeyLabelLeft = Math.floor(whiteKeyWidth*0.30);
	whiteKeyLabelSize = 120 * whiteKeyWidth/15;

	// Black Key - 11x42
	blackKeyWidth = Math.floor(whiteKeyWidth * 0.32) * 2 + whiteKeySpacing;
	blackKeyHeight = Math.floor(whiteKeyHeight * 0.58);
	blackKeyOffset = whiteKeyOffset + Math.floor(whiteKeyWidth * 0.75);
	
	// Black Key Label
	blackKeyLabelTop = Math.floor(blackKeyHeight*0.50);
	blackKeyLabelLeft = Math.floor(blackKeyWidth*0.25);
	blackKeyLabelSize = 90 * whiteKeyWidth/15;
	
	for (var key = 0; key < 88; key++)
	{
		var octave = Math.floor(key/12);
		var keyIdx = key % 12;
		if (!(keyIdx==1 || keyIdx==4 || keyIdx==6 || keyIdx == 9 || keyIdx==11))
		{
			if (key !=0) whiteKeyOffset += whiteKeyWidth + whiteKeySpacing;
			var whiteKey='<div class="key" id="key-'+key+'" style="position:absolute;z-index:1;top:211px;left:'+whiteKeyOffset+'px; background-color:white;width:'+whiteKeyWidth+'px;height:'+whiteKeyHeight+'px"></div>';
			var whiteKeyLabel = '<b><div class="keyLabel" id="keyLabel-'+key+'" style="color:#330099;position:absolute;top:'+whiteKeyLabelTop+'px;left:'+whiteKeyLabelLeft+'px;z-index:2;font-size:'+whiteKeyLabelSize+'%";font-weight:bold></div></b>';
			$("#piano").after(whiteKey);
			$("#key-"+key).append(whiteKeyLabel);
		}
		else
		{
			blackKeyOffset = whiteKeyOffset + Math.floor(whiteKeyWidth * 0.75);
			var blackKey='<div class="key" id="key-'+key+'" style="position:absolute;z-index:2;top:211px;left:'+blackKeyOffset+'px; background-color:black;width:'+blackKeyWidth+'px;height:'+blackKeyHeight+'px;border:0px solid #000"></div>';
			var blackKeyLabel = '<b><div class="keyLabel" id="keyLabel-'+key+'" style="color:#330099;position:absolute;top:'+blackKeyLabelTop+'px;left:'+blackKeyLabelLeft+'px;z-index:2;font-size:'+blackKeyLabelSize+'%";font-weight:bold></div></b>';
			$("#piano").after(blackKey);
			$("#key-"+key).append(blackKeyLabel);
		}
	}

	
	firstKeyLeft = Number($("#key-0").css("left").replace(/px/g, ''));
	lastKeyLeft  = Number($("#key-87").css("left").replace(/px/g, ''));
	keyTop       = Number($("#key-87").css("top").replace(/px/g, ''));
	
	pianoWidth = Number(lastKeyLeft) + whiteKeyWidth + Number(firstKeyLeft);
	pianoLeft = (screenWidth - pianoWidth)/2;
	pianoHeight = Number(keyTop) + whiteKeyHeight + 5;
	$("#pianoWrapper").css("width", pianoWidth);
	$("#pianoWrapper").css("left", pianoLeft);
	$("#pianoWrapper").css("height", pianoHeight);
	
	redLineTop = keyTop;
	redLineLeft = pianoLeft + 6;
	redLineWidth = pianoWidth - 12;

	$("#redLine").css("width", redLineWidth);
	$("#redLine").css("left", redLineLeft);
	$("#redLine").css("top", redLineTop);
	

	chairWidth = whiteKeyWidth * 18;
	chairHeight = chairWidth * 0.5;
	chairTop = pianoHeight + 100; 
	chairLeft = pianoLeft + (pianoWidth - chairWidth)/2;

	$("#chair").css("top", chairTop);
	$("#chair").css("left", chairLeft);
	$("#chair").css("width", chairWidth);
	$("#chair").css("height", chairHeight);
}

function drawControls()
{
	$("#controls").find("*").andSelf().each(
	    function(){
		var width = $(this).css('width');
		var left = $(this).css('left');
		var fontSize = $(this).css('font-size');
		width = width.replace(/px/g, '');
		left = left.replace(/px/g, '');
		fontSize = fontSize.replace(/px/g, '');
		
		$(this).css("width",width*whiteKeyWidth/20+"px");
		$(this).css("left",left*whiteKeyWidth/20+"px");
		$(this).css("font-size",fontSize*(whiteKeyWidth/50+3/5)+"px");
	    }
	);

	var controlsWidth = $("#controls").css("width").replace(/px/g, '');
	// Not sure why the PianoLeft wasn't added here, but it works
	var controlsLeft = pianoLeft + (pianoWidth - Number(controlsWidth))/2;
	$("#controls").css("left", controlsLeft);
	
	dhtmlxEvent(window, "load", sliderInit);
	sliderInit();
	
	infoTop = chairTop + 50;//350;
	infoLeft = chairLeft + 30;//150;
	infoWidth = chairWidth - 50;//800;
	var infoArea = '<b><div id="info" style="position:absolute;top:'+infoTop+'px;left:'+infoLeft+'px;width:'+infoWidth+'px;height:50px;background-color:clear;color:white;font-size:22px"></b>';
	$("body").after(infoArea);

	$(".control").hover(function(){
		if(!(userAgent.indexOf("iPhone") !== -1 || userAgent.indexOf("iPad") !== -1))
		{
			message = info[$(this).attr('id')];
			$("#info").append(message);
		}
	  },
	  function(){
	    $("#info").text("");              
	});
	
	$("#repeatMeasure").change(function(){
		$('#repeatMeasure').blur();
		var text = $("#repeatMeasure option:selected").text();
		text = text.replace(/ Measure/g, '');
		text = text.replace(/s/g, '');
		newMeasureLength = Number(text);
	  });

	$("#repeatCheck").click(function(){
		repeatMask();
	  });
	
	$(".key").click(function(){
		keyPress = $(this).attr('id');
		keyPress = keyPress.replace(/key-/g,'');
		notePress = Number(keyPress) + 21;
		MIDI.noteOn(0,notePress,90,0);
		MIDI.noteOff(0,notePress,0.4);
		$("#key-"+keyPress).css("background-color","yellow");

		timers.push(setTimeout(function() {
			resetNote(notePress);
		}, 400));
			
	  });

	  $('#startMeasure').live('blur', function() {
		if ($("#startMeasure").val() == "")
			$("#startMeasure").val(startMeasure);
	});


	  $('#endMeasure').live('blur', function() {	
		if ($("#endMeasure").val() == "")
			$("#endMeasure").val(endMeasure);
	});
}


function feedbackForm() {
	$("#feedbackForm").find("*").andSelf().each(
	    function(){
		var width = $(this).css('width');
		var left = $(this).css('left');
		var fontSize = $(this).css('font-size');
		width = width.replace(/px/g, '');
		left = left.replace(/px/g, '');
		fontSize = fontSize.replace(/px/g, '');
		
		$(this).css("width",width*whiteKeyWidth/20+"px");
		$(this).css("left",left*whiteKeyWidth/20+"px");
		$(this).css("font-size",fontSize*(whiteKeyWidth/50+3/5)+"px");
	    }
	);
	
	feedbackFormWidth = pianoWidth * 0.34;
	feedbackFormHeight = pianoHeight * 0.7;
	feedbackFormTop = screen.height * 0.25; 
	feedbackFormLeft = pianoLeft + (pianoWidth - feedbackFormWidth)/2;

	$("#feedbackForm").css("top", feedbackFormTop);
	$("#feedbackForm").css("left", feedbackFormLeft);
	$("#feedbackForm").css("width", feedbackFormWidth);
	$("#feedbackForm").css("height", feedbackFormHeight);

	feedbackHeight = whiteKeyHeight;
	feedbackWidth = 20;
	fontSize = $("#feedback").css('font-size').replace(/px/g, '');
	fontSize = fontSize*(screenWidth/1300)
	
	$("#feedback").css("width", feedbackHeight);
	$("#feedback").css("height", feedbackWidth);
	$("#feedback").css("left", feedbackWidth/2 - feedbackHeight/2 - 1);
	$("#feedback").css("top", screen.height*0.4);
	$("#feedback").css("font-size",fontSize+"px");
	
	$("#feedback").click(function() {
		if (didPressPlayBtn)
			didPressPauseButton();
		feedbackFormDisplayed = 1;
		$('#feedbackForm').css("display","");
		$('#message').focus();
		
	});

	$("#cancel").click(function() {	
		$('#feedbackForm').css("display","none");
		feedbackFormDisplayed = 0;
	});
	
	$('#submit').click(function() {	
		var message = $("textarea#message").val();
		if (message == "") {
			$("textarea#message").focus();
			return false;
		}
		
		var dataString = '&message='+ message;
		$.ajax({
		  type: "POST",
		  url: "./php/feedback.php",
		  data: dataString,
		  success: function() {
			$('#feedbackForm').css("display","none");
			feedbackFormDisplayed = 0;
			$('#feedbackThanks').css("display","");
			setTimeout(function() {
				$('#feedbackThanks').css("display","none");
			}, 2000);
		  }
		});
		return false;
	});
	

  
}

function playDisplay()
{
	rulerWidth = Number($("#playDisplay").css("width").replace(/px/g, '')) * 0.8;
	rulerLeft = Number($("#playDisplay").css("left").replace(/px/g, '')) + rulerWidth/10;
	rulerTop = Number($("#playDisplay").css("height").replace(/px/g, ''))/2 - 10;
	markTop = rulerTop - 12;
	markHeight = 13;
	markLeft = 0;
	
	
	var ruler='<div id="ruler" style="position:absolute;z-index:5;top:'+rulerTop+'px;left:'+rulerLeft+'px; background-color:black;width:'+rulerWidth+'px;height:3px"></div>';
	$("#playDisplay").append(ruler);
	
	for(var i = 1; i < tune.length + 1; i++)
	{
		var check='<div id="check-'+i+'" style="position:absolute;z-index:5;top:'+markTop+'px;left:'+markLeft+'px; background-color:black;width:2px;height:'+markHeight+'px"></div>';
		$("#ruler").append(check);
	
		if (i%5 == 0 || i == 1)
		{				
			var checkNum = '<b><div style="position:absolute;top:12px;left:-9px;width:20px;z-index:6;font-size:12px;text-align:center;background-color:clear";font-weight:bold>'+i+'</div></b>';
			$("#check-"+i).append(checkNum);
		}
		
		measureBoxLeft = markLeft;
		measureBoxTop = markTop;
		measureBoxWidth = rulerWidth/(tune.length-1);
		measureBoxHeight = markHeight;
		var measureBox='<div class="measureBox" id="measureBox-'+i+'" style="position:absolute;z-index:7;top:'+measureBoxTop+'px;left:'+measureBoxLeft+'px; background-color:clear;width:'+measureBoxWidth+'px;height:'+measureBoxHeight+'px"></div>';
		$("#ruler").append(measureBox);
		
		markLeft += rulerWidth/(tune.length-1);
	}

	playIntervalLeft = 0;
	playIntervalWidth = rulerWidth/(tune.length-1);
	var playInterval='<div id="playInterval" style="position:absolute;top:'+markTop+'px;left:'+playIntervalLeft+'px; background-color:green;width:'+playIntervalWidth+'px;height:'+markHeight+'px;z-index:4"></div>';
	$("#ruler").append(playInterval);

	var curPosition='<div id="curPosition" style="position:absolute;z-index:5;top:'+markTop+'px;left:0px; background-color:red;width:3px;height:'+markHeight+'px"></div>';
	$("#ruler").append(curPosition);
	
	$(".measureBox").click(function(){
		selectedMeasureBox = $(this).attr('id');
		selectedMeasure = Number(selectedMeasureBox.replace(/measureBox-/g,''));
		updatePosition(selectedMeasure);
	  });
}

/* --- ================ SLIDER ================== */
function sliderInit()
{	// Add 200 to max as ugly fix to keep slider going off deep end
	tempoSlider = new dhtmlxSlider("tempoSlider", 100 * whiteKeyWidth/21, "dhx_skyblue", false, 1300, 3900+200, 3900 - (tempo - 1300), 200);
	tempoSlider.setImagePath("./slider/imgs/");
	tempoSlider.attachEvent("onChange", function(newtempo) {
		// Ugly fix to keep slider going off deep end
		if (newtempo > 3900) 
		{
			tempoSlider.setValue(3900);
			return;
		}
		document.getElementById("tempo").value = newtempo;
		tempo = 3900 - (newtempo - 1300);
		});
	
	document.getElementById("tempo").value = 3900 - (tempo - 1300);	
	tempoSlider.init();
};/*
	-------------------------------------
	MIDI.audioDetect : 0.3
	-------------------------------------
	https://github.com/mudcube/MIDI.js
	-------------------------------------
	Probably, Maybe, No... Absolutely!
	-------------------------------------
	Test to see what types of <audio> MIME types are playable by the browser.
	-------------------------------------
*/

if (typeof(MIDI) === "undefined") var MIDI = {};

(function() { "use strict";

var supports = {};	
var canPlayThrough = function (src) {
	var audio = new Audio();
	var mime = src.split(";")[0];
	audio.id = "audio";
	audio.setAttribute("preload", "auto");
	audio.setAttribute("audiobuffer", true);
	audio.addEventListener("canplaythrough", function() {
		supports[mime] = true;
	}, false);
	audio.src = "data:" + src;
	document.body.appendChild(audio);
};

MIDI.audioDetect = function(callback) {
	// check whether <audio> tag is supported
	if (typeof(Audio) === "undefined") return callback({});
	// check whether canPlayType is supported
	var audio = new Audio();
	if (typeof(audio.canPlayType) === "undefined") return callback(supports);
	// see what we can learn from the browser
	var vorbis = audio.canPlayType('audio/ogg; codecs="vorbis"');
	vorbis = (vorbis === "probably" || vorbis === "maybe");
	var mpeg = audio.canPlayType('audio/mpeg');
	mpeg = (mpeg === "probably" || mpeg === "maybe");
	// maybe nothing is supported
	if (!vorbis && !mpeg) {
		callback(supports);
		return;
	}
	// or maybe something is supported
	if (vorbis) canPlayThrough("audio/ogg;base64,T2dnUwACAAAAAAAAAADqnjMlAAAAAOyyzPIBHgF2b3JiaXMAAAAAAUAfAABAHwAAQB8AAEAfAACZAU9nZ1MAAAAAAAAAAAAA6p4zJQEAAAANJGeqCj3//////////5ADdm9yYmlzLQAAAFhpcGguT3JnIGxpYlZvcmJpcyBJIDIwMTAxMTAxIChTY2hhdWZlbnVnZ2V0KQAAAAABBXZvcmJpcw9CQ1YBAAABAAxSFCElGVNKYwiVUlIpBR1jUFtHHWPUOUYhZBBTiEkZpXtPKpVYSsgRUlgpRR1TTFNJlVKWKUUdYxRTSCFT1jFloXMUS4ZJCSVsTa50FkvomWOWMUYdY85aSp1j1jFFHWNSUkmhcxg6ZiVkFDpGxehifDA6laJCKL7H3lLpLYWKW4q91xpT6y2EGEtpwQhhc+211dxKasUYY4wxxsXiUyiC0JBVAAABAABABAFCQ1YBAAoAAMJQDEVRgNCQVQBABgCAABRFcRTHcRxHkiTLAkJDVgEAQAAAAgAAKI7hKJIjSZJkWZZlWZameZaouaov+64u667t6roOhIasBACAAAAYRqF1TCqDEEPKQ4QUY9AzoxBDDEzGHGNONKQMMogzxZAyiFssLqgQBKEhKwKAKAAAwBjEGGIMOeekZFIi55iUTkoDnaPUUcoolRRLjBmlEluJMYLOUeooZZRCjKXFjFKJscRUAABAgAMAQICFUGjIigAgCgCAMAYphZRCjCnmFHOIMeUcgwwxxiBkzinoGJNOSuWck85JiRhjzjEHlXNOSuekctBJyaQTAAAQ4AAAEGAhFBqyIgCIEwAwSJKmWZomipamiaJniqrqiaKqWp5nmp5pqqpnmqpqqqrrmqrqypbnmaZnmqrqmaaqiqbquqaquq6nqrZsuqoum65q267s+rZru77uqapsm6or66bqyrrqyrbuurbtS56nqqKquq5nqq6ruq5uq65r25pqyq6purJtuq4tu7Js664s67pmqq5suqotm64s667s2rYqy7ovuq5uq7Ks+6os+75s67ru2rrwi65r66os674qy74x27bwy7ouHJMnqqqnqq7rmarrqq5r26rr2rqmmq5suq4tm6or26os67Yry7aumaosm64r26bryrIqy77vyrJui67r66Ys67oqy8Lu6roxzLat+6Lr6roqy7qvyrKuu7ru+7JuC7umqrpuyrKvm7Ks+7auC8us27oxuq7vq7It/KosC7+u+8Iy6z5jdF1fV21ZGFbZ9n3d95Vj1nVhWW1b+V1bZ7y+bgy7bvzKrQvLstq2scy6rSyvrxvDLux8W/iVmqratum6um7Ksq/Lui60dd1XRtf1fdW2fV+VZd+3hV9pG8OwjK6r+6os68Jry8ov67qw7MIvLKttK7+r68ow27qw3L6wLL/uC8uq277v6rrStXVluX2fsSu38QsAABhwAAAIMKEMFBqyIgCIEwBAEHIOKQahYgpCCKGkEEIqFWNSMuakZM5JKaWUFEpJrWJMSuaclMwxKaGUlkopqYRSWiqlxBRKaS2l1mJKqcVQSmulpNZKSa2llGJMrcUYMSYlc05K5pyUklJrJZXWMucoZQ5K6iCklEoqraTUYuacpA46Kx2E1EoqMZWUYgupxFZKaq2kFGMrMdXUWo4hpRhLSrGVlFptMdXWWqs1YkxK5pyUzDkqJaXWSiqtZc5J6iC01DkoqaTUYiopxco5SR2ElDLIqJSUWiupxBJSia20FGMpqcXUYq4pxRZDSS2WlFosqcTWYoy1tVRTJ6XFklKMJZUYW6y5ttZqDKXEVkqLsaSUW2sx1xZjjqGkFksrsZWUWmy15dhayzW1VGNKrdYWY40x5ZRrrT2n1mJNMdXaWqy51ZZbzLXnTkprpZQWS0oxttZijTHmHEppraQUWykpxtZara3FXEMpsZXSWiypxNhirLXFVmNqrcYWW62ltVprrb3GVlsurdXcYqw9tZRrrLXmWFNtBQAADDgAAASYUAYKDVkJAEQBAADGMMYYhEYpx5yT0ijlnHNSKucghJBS5hyEEFLKnINQSkuZcxBKSSmUklJqrYVSUmqttQIAAAocAAACbNCUWByg0JCVAEAqAIDBcTRNFFXVdX1fsSxRVFXXlW3jVyxNFFVVdm1b+DVRVFXXtW3bFn5NFFVVdmXZtoWiqrqybduybgvDqKqua9uybeuorqvbuq3bui9UXVmWbVu3dR3XtnXd9nVd+Bmzbeu2buu+8CMMR9/4IeTj+3RCCAAAT3AAACqwYXWEk6KxwEJDVgIAGQAAgDFKGYUYM0gxphhjTDHGmAAAgAEHAIAAE8pAoSErAoAoAADAOeecc84555xzzjnnnHPOOeecc44xxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY0wAwE6EA8BOhIVQaMhKACAcAABACCEpKaWUUkoRU85BSSmllFKqFIOMSkoppZRSpBR1lFJKKaWUIqWgpJJSSimllElJKaWUUkoppYw6SimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaVUSimllFJKKaWUUkoppRQAYPLgAACVYOMMK0lnhaPBhYasBAByAwAAhRiDEEJpraRUUkolVc5BKCWUlEpKKZWUUqqYgxBKKqmlklJKKbXSQSihlFBKKSWUUkooJYQQSgmhlFRCK6mEUkoHoYQSQimhhFRKKSWUzkEoIYUOQkmllNRCSB10VFIpIZVSSiklpZQ6CKGUklJLLZVSWkqpdBJSKamV1FJqqbWSUgmhpFZKSSWl0lpJJbUSSkklpZRSSymFVFJJJYSSUioltZZaSqm11lJIqZWUUkqppdRSSiWlkEpKqZSSUmollZRSaiGVlEpJKaTUSimlpFRCSamlUlpKLbWUSkmptFRSSaWUlEpJKaVSSksppRJKSqmllFpJKYWSUkoplZJSSyW1VEoKJaWUUkmptJRSSymVklIBAEAHDgAAAUZUWoidZlx5BI4oZJiAAgAAQABAgAkgMEBQMApBgDACAQAAAADAAAAfAABHARAR0ZzBAUKCwgJDg8MDAAAAAAAAAAAAAACAT2dnUwAEAAAAAAAAAADqnjMlAgAAADzQPmcBAQA=");
	if (mpeg) canPlayThrough("audio/mpeg;base64,/+MYxAAAAANIAUAAAASEEB/jwOFM/0MM/90b/+RhST//w4NFwOjf///PZu////9lns5GFDv//l9GlUIEEIAAAgIg8Ir/JGq3/+MYxDsLIj5QMYcoAP0dv9HIjUcH//yYSg+CIbkGP//8w0bLVjUP///3Z0x5QCAv/yLjwtGKTEFNRTMuOTeqqqqqqqqqqqqq/+MYxEkNmdJkUYc4AKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
	// lets find out!
	var time = (new Date()).getTime(); 
	var interval = window.setInterval(function() {
		for (var key in supports) {}
		var now = (new Date()).getTime();
		var maxExecution = now - time > 5000;
		if (key || maxExecution) {
			window.clearInterval(interval);
			callback(supports);
		}
	}, 1);
};

})();/*
	-----------------------------------------------------------
	MIDI.loadPlugin : 0.1.2 : 01/18/2012
	-----------------------------------------------------------
	https://github.com/mudcube/MIDI.js
	-----------------------------------------------------------
	MIDI.loadPlugin({
		instrument: "acoustic_grand_piano", // or 1 (default)
		instruments: [ "acoustic_grand_piano", "acoustic_guitar_nylon" ], // or multiple instruments
		callback: function() { }
	});
*/

if (typeof (MIDI) === "undefined") var MIDI = {};
if (typeof (MIDI.Soundfont) === "undefined") MIDI.Soundfont = {};

(function() { "use strict";

// Turn on to get "onprogress" event. XHR will not work from file://
var USE_XHR = false; 
var USE_JAZZMIDI = false;

MIDI.loadPlugin = function(conf) {
	if (typeof(conf) === "function") conf = {
		callback: conf
	};
	/// Get the instrument name.
	var instruments = conf.instruments || conf.instrument || "acoustic_grand_piano";
	if (typeof(instruments) !== "object") instruments = [ instruments ];
	instruments.map(function(data) {
		if (typeof(data) === "number") data = MIDI.GeneralMIDI.byId[data];
		return data;
	});
	///
	MIDI.soundfontUrl = conf.soundfontUrl || MIDI.soundfontUrl || "./soundfont/";
	/// Detect the best type of audio to use.
	MIDI.audioDetect(function(types) {
		var api = "";
		// use the most appropriate plugin if not specified
		if (apis[conf.api]) {
			api = conf.api;
		} else if (apis[window.location.hash.substr(1)]) {
			api = window.location.hash.substr(1);
		} else if (USE_JAZZMIDI && navigator.requestMIDIAccess) {
			api = "webmidi";
		} else if (window.webkitAudioContext) { // Chrome
			api = "webaudio";
		} else if (window.Audio) { // Firefox
			api = "audiotag";
		} else { // Internet Explorer
			api = "flash";
		}
		///
		if (!connect[api]) return;
		// use audio/ogg when supported
		var filetype = types["audio/ogg"] ? "ogg" : "mp3";
		// load the specified plugin
		connect[api](filetype, instruments, conf);
	});
};

///

var connect = {};

connect.webmidi = function(filetype, instruments, conf) {
	if (MIDI.loader) MIDI.loader.message("Web MIDI API...");
	MIDI.WebMIDI.connect(conf);
};

connect.flash = function(filetype, instruments, conf) {
	// fairly quick, but requires loading of individual MP3s (more http requests).
	if (MIDI.loader) MIDI.loader.message("Flash API...");
	DOMLoader.script.add({
		src: "./inc/SoundManager2/script/soundmanager2.js",
		verify: "SoundManager",
		callback: function () {
			MIDI.Flash.connect(conf);
		}
	});
};

connect.audiotag = function(filetype, instruments, conf) {
	if (MIDI.loader) MIDI.loader.message("HTML5 Audio API...");
	// works ok, kinda like a drunken tuna fish, across the board.
	var queue = createQueue({
		items: instruments,
		getNext: function(instrumentId) {
			if (USE_XHR) {
				DOMLoader.sendRequest({
					url: MIDI.soundfontUrl + instrumentId + "-" + filetype + ".js",
					onprogress: getPercent,
					onload: function (response) {
						MIDI.Soundfont[instrumentId] = JSON.parse(response.responseText);
						if (MIDI.loader) MIDI.loader.update(null, "Downloading", 100);
						queue.getNext();
					}
				});
			} else {
				DOMLoader.script.add({
					src: MIDI.soundfontUrl + instrumentId + "-" + filetype + ".js",
					verify: "MIDI.Soundfont." + instrumentId,
					callback: function() {
						if (MIDI.loader) MIDI.loader.update(null, "Downloading...", 100);
						queue.getNext();
					}
				});
			}
		},
		onComplete: function() {
			MIDI.AudioTag.connect(conf);
		}
	});
};

connect.webaudio = function(filetype, instruments, conf) {
	if (MIDI.loader) MIDI.loader.message("Web Audio API...");
	// works awesome! safari and chrome support
	var queue = createQueue({
		items: instruments,
		getNext: function(instrumentId) {
			if (USE_XHR) {
				DOMLoader.sendRequest({
					url: MIDI.soundfontUrl + instrumentId + "-" + filetype + ".js",
					onprogress: getPercent,
					onload: function(response) {
						MIDI.Soundfont[instrumentId] = JSON.parse(response.responseText);
						if (MIDI.loader) MIDI.loader.update(null, "Downloading...", 100);
						queue.getNext();
					}
				});
			} else {
				DOMLoader.script.add({
					src: MIDI.soundfontUrl + instrumentId + "-" + filetype + ".js",
					verify: "MIDI.Soundfont." + instrumentId,
					callback: function() {
						if (MIDI.loader) MIDI.loader.update(null, "Downloading...", 100);
						queue.getNext();
					}
				});
			}
		},
		onComplete: function() {
			MIDI.WebAudio.connect(conf);
		}
	});
};

/// Helpers

var apis = {
	"webmidi": true, 
	"webaudio": true, 
	"audiotag": true, 
	"flash": true 
};

var getPercent = function(event) {
	if (!this.totalSize) {
		if (this.getResponseHeader("Content-Length-Raw")) {
			this.totalSize = parseInt(this.getResponseHeader("Content-Length-Raw"));
		} else {
			this.totalSize = event.total;
		}
	}
	var percent = this.totalSize ? Math.round(event.loaded / this.totalSize * 100) : "";
	if (MIDI.loader) MIDI.loader.update(null, "Downloading...", percent);
};

var createQueue = function(conf) {
	var self = {};
	self.queue = [];
	for (var key in conf.items) {
		self.queue.push(conf.items[key]);
	}
	self.getNext = function() {
		if (!self.queue.length) return conf.onComplete();
		conf.getNext(self.queue.shift());
	};
	setTimeout(self.getNext, 1);
	return self;
};

})();/*
	--------------------------------------------
	MIDI.Plugin : 0.3.2 : 2013/01/26
	--------------------------------------------
	https://github.com/mudcube/MIDI.js
	--------------------------------------------
	Inspired by javax.sound.midi (albeit a super simple version): 
		http://docs.oracle.com/javase/6/docs/api/javax/sound/midi/package-summary.html
	--------------------------------------------
	Technologies:
		MIDI.WebMIDI
		MIDI.WebAudio
		MIDI.Flash
		MIDI.AudioTag
	--------------------------------------------
	Helpers:
		MIDI.GeneralMIDI
		MIDI.channels
		MIDI.keyToNote
		MIDI.noteToKey
*/

if (typeof (MIDI) === "undefined") var MIDI = {};

(function() { "use strict";

var setPlugin = function(root) {
	MIDI.api = root.api;
	MIDI.setVolume = root.setVolume;
	MIDI.programChange = root.programChange;
	MIDI.noteOn = root.noteOn;
	MIDI.noteOff = root.noteOff;
	MIDI.chordOn = root.chordOn;
	MIDI.chordOff = root.chordOff;
	MIDI.stopAllNotes = root.stopAllNotes;
	MIDI.getInput = root.getInput;
	MIDI.getOutputs = root.getOutputs;
};

/*
	--------------------------------------------
	Web MIDI API - Native Soundbank
	--------------------------------------------
	https://dvcs.w3.org/hg/audio/raw-file/tip/midi/specification.html
	--------------------------------------------
*/

(function () {
	var plugin = null;
	var output = null;
	var channels = [];
	var root = MIDI.WebMIDI = {
		api: "webmidi"
	};
	root.setVolume = function (channel, volume) { // set channel volume
		output.send([0xB0 + channel, 0x07, volume]);
	};

	root.programChange = function (channel, program) { // change channel instrument
		output.send([0xC0 + channel, program]);
	};

	root.noteOn = function (channel, note, velocity, delay) {
		output.send([0x90 + channel, note, velocity], delay * 1000);
	};

	root.noteOff = function (channel, note, delay) {
		output.send([0x80 + channel, note, 0], delay * 1000);
	};

	root.chordOn = function (channel, chord, velocity, delay) {
		for (var n = 0; n < chord.length; n ++) {
			var note = chord[n];
			output.send([0x90 + channel, note, velocity], delay * 1000);
		}
	};
	
	root.chordOff = function (channel, chord, delay) {
		for (var n = 0; n < chord.length; n ++) {
			var note = chord[n];
			output.send([0x80 + channel, note, 0], delay * 1000);
		}
	};
	
	root.stopAllNotes = function () {
		for (var channel = 0; channel < 16; channel ++) {
			output.send([0xB0 + channel, 0x7B, 0]);
		}
	};

	root.getInput = function () {
		return plugin.getInputs();
	};
	
	root.getOutputs = function () {
		return plugin.getOutputs();
	};

	root.connect = function (conf) {
		setPlugin(root);
		navigator.requestMIDIAccess(function (access) {
			plugin = access;
			output = plugin.getOutput(0);
			if (conf.callback) conf.callback();
		}, function (err) { // well at least we tried!
			if (window.webkitAudioContext) { // Chrome
				conf.api = "webaudio";
			} else if (window.Audio) { // Firefox
				conf.api = "audiotag";
			} else { // Internet Explorer
				conf.api = "flash";
			}
			MIDI.loadPlugin(conf);
		});
	};
})();

/*
	--------------------------------------------
	Web Audio API - OGG or MPEG Soundbank
	--------------------------------------------
	https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html
	--------------------------------------------
*/

if (window.AudioContext || window.webkitAudioContext) (function () {

	var AudioContext = window.AudioContext || window.webkitAudioContext;
	var root = MIDI.WebAudio = {
		api: "webaudio"
	};
	var ctx;
	var sources = {};
	var masterVolume = 127;
	var audioBuffers = {};
	var audioLoader = function (instrument, urlList, index, bufferList, callback) {
		var synth = MIDI.GeneralMIDI.byName[instrument];
		var instrumentId = synth.number;
		var url = urlList[index];
		if (!MIDI.Soundfont[instrument][url]) { // missing soundfont
			return callback(instrument);
		}
		var base64 = MIDI.Soundfont[instrument][url].split(",")[1];
		var buffer = Base64Binary.decodeArrayBuffer(base64);
		ctx.decodeAudioData(buffer, function (buffer) {
			var msg = url;
			while (msg.length < 3) msg += "&nbsp;";
			if (typeof (MIDI.loader) !== "undefined") {
				MIDI.loader.update(null, synth.instrument + "<br>Processing: " + (index / 87 * 100 >> 0) + "%<br>" + msg);
			}
			buffer.id = url;
			bufferList[index] = buffer;
			//
			if (bufferList.length === urlList.length) {
				while (bufferList.length) {
					buffer = bufferList.pop();
					if (!buffer) continue;
					var nodeId = MIDI.keyToNote[buffer.id];
					audioBuffers[instrumentId + "" + nodeId] = buffer;
				}
				callback(instrument);
			}
		});
	};

	root.setVolume = function (channel, volume) {
		masterVolume = volume;
	};

	root.programChange = function (channel, program) {
		MIDI.channels[channel].instrument = program;
	};

	root.noteOn = function (channel, note, velocity, delay) {
		/// check whether the note exists
		if (!MIDI.channels[channel]) return;
		var instrument = MIDI.channels[channel].instrument;
		if (!audioBuffers[instrument + "" + note]) return;
		/// convert relative delay to absolute delay
		if (delay < ctx.currentTime) delay += ctx.currentTime;
		/// crate audio buffer
		var source = ctx.createBufferSource();
		sources[channel + "" + note] = source;
		source.buffer = audioBuffers[instrument + "" + note];
		source.connect(ctx.destination);
		///
		var gainNode = ctx.createGainNode();
		var value = (velocity / 127) * (masterVolume / 127) * 2 - 1;
		gainNode.connect(ctx.destination);
		gainNode.gain.value = Math.max(-1, value);
		source.connect(gainNode);
		source.noteOn(delay || 0);
		return source;
	};

	root.noteOff = function (channel, note, delay) {
		delay = delay || 0;
		if (delay < ctx.currentTime) delay += ctx.currentTime;
		var source = sources[channel + "" + note];
		if (!source) return;
		// @Miranet: "the values of 0.2 and 0.3 could ofcourse be used as 
		// a 'release' parameter for ADSR like time settings."
		// add { "metadata": { release: 0.3 } } to soundfont files
		source.gain.linearRampToValueAtTime(1, delay);
		source.gain.linearRampToValueAtTime(0, delay + 0.2);
		source.noteOff(delay + 0.3);
		return source;
	};

	root.chordOn = function (channel, chord, velocity, delay) {
		var ret = {}, note;
		for (var n = 0, length = chord.length; n < length; n++) {
			ret[note = chord[n]] = root.noteOn(channel, note, velocity, delay);
		}
		return ret;
	};

	root.chordOff = function (channel, chord, delay) {
		var ret = {}, note;
		for (var n = 0, length = chord.length; n < length; n++) {
			ret[note = chord[n]] = root.noteOff(channel, note, delay);
		}
		return ret;
	};

	root.connect = function (conf) {
		setPlugin(root);
		//
		MIDI.Player.ctx = ctx = new AudioContext();
		///
		var urlList = [];
		var keyToNote = MIDI.keyToNote;
		for (var key in keyToNote) urlList.push(key);
		var bufferList = [];
		var pending = {};
		var oncomplete = function(instrument) {
			delete pending[instrument];
			for (var key in pending) break;
			if (!key) conf.callback();
		};
		for (var instrument in MIDI.Soundfont) {
			pending[instrument] = true;
			for (var i = 0; i < urlList.length; i++) {
				audioLoader(instrument, urlList, i, bufferList, oncomplete);
			}
		}
	};
})();

/*
	--------------------------------------------
	AudioTag <audio> - OGG or MPEG Soundbank
	--------------------------------------------
	http://dev.w3.org/html5/spec/Overview.html#the-audio-element
	--------------------------------------------
*/

if (window.Audio) (function () {

	var root = MIDI.AudioTag = {
		api: "audiotag"
	};
	var note2id = {};
	var volume = 127; // floating point 
	var channel_nid = -1; // current channel
	var channels = []; // the audio channels
	var channelInstrumentNoteIds = []; // instrumentId + noteId that is currently playing in each 'channel', for routing noteOff/chordOff calls
	var notes = {}; // the piano keys
	for (var nid = 0; nid < 12; nid++) {
		channels[nid] = new Audio();
	}

	var playChannel = function (channel, note) {
		if (!MIDI.channels[channel]) return;
		var instrument = MIDI.channels[channel].instrument;
		var instrumentId = MIDI.GeneralMIDI.byId[instrument].id;
		var note = notes[note];
		if (!note) return;
		var instrumentNoteId = instrumentId + "" + note.id;
		var nid = (channel_nid + 1) % channels.length;
		var audio = channels[nid];
		channelInstrumentNoteIds[ nid ] = instrumentNoteId;
		audio.src = MIDI.Soundfont[instrumentId][note.id];
		audio.volume = volume / 127;
		audio.play();
		channel_nid = nid;
	};

	var stopChannel = function (channel, note) {
		if (!MIDI.channels[channel]) return;
		var instrument = MIDI.channels[channel].instrument;
		var instrumentId = MIDI.GeneralMIDI.byId[instrument].id;
		var note = notes[note];
		if (!note) return;
		var instrumentNoteId = instrumentId + "" + note.id;

		for(var i=0;i<channelInstrumentNoteIds.length;i++){
			var cId = channelInstrumentNoteIds[i];
			if(cId && cId == instrumentNoteId){
				channels[i].pause();
			}
		}
	};

	root.programChange = function (channel, program) {
		MIDI.channels[channel].instrument = program;
	};

	root.setVolume = function (channel, n) {
		volume = n; //- should be channel specific volume
	};

	root.noteOn = function (channel, note, velocity, delay) {
		var id = note2id[note];
		if (!notes[id]) return;
		if (delay) {
			return window.setTimeout(function () {
				playChannel(channel, id);
			}, delay * 1000);
		} else {
			playChannel(channel, id);
		}
	};
	
	root.noteOff = function (channel, note, delay) {
		var id = note2id[note];
		if (!notes[id]) return;
		if (delay) {
			return setTimeout(function() {
				stopChannel(channel, id);
			}, delay * 1000)
		} else {
			stopChannel(channel, id);
		}
	};
	
	root.chordOn = function (channel, chord, velocity, delay) {
		for (var idx = 0; idx < chord.length; idx ++) {
			var n = chord[idx];
			var id = note2id[n];
			if (!notes[id]) continue;
			if (delay) {
				return window.setTimeout(function () {
					playChannel(channel, id);
				}, delay * 1000);
			} else {
				playChannel(channel, id);
			}
		}
	};
	
	root.chordOff = function (channel, chord, delay) {
		for (var idx = 0; idx < chord.length; idx ++) {
			var n = chord[idx];
			var id = note2id[n];
			if (!notes[id]) continue;
			if (delay) {
				return window.setTimeout(function () {
					stopChannel(channel, id);
				}, delay * 1000);
			} else {
				stopChannel(channel, id);
			}
		}
	};
	
	root.stopAllNotes = function () {
		for (var nid = 0, length = channels.length; nid < length; nid++) {
			channels[nid].pause();
		}
	};
	
	root.connect = function (conf) {
		for (var key in MIDI.keyToNote) {
			note2id[MIDI.keyToNote[key]] = key;
			notes[key] = {
				id: key
			};
		}
		setPlugin(root);
		///
		if (conf.callback) conf.callback();
	};
})();

/*
	--------------------------------------------
	Flash - MP3 Soundbank
	--------------------------------------------
	http://www.schillmania.com/projects/soundmanager2/
	--------------------------------------------
*/
	
(function () {

	var root = MIDI.Flash = {
		api: "flash"
	};
	var noteReverse = {};
	var notes = {};

	root.programChange = function (channel, program) {
		MIDI.channels[channel].instrument = program;
	};

	root.setVolume = function (channel, note) {

	};

	root.noteOn = function (channel, note, velocity, delay) {
		if (!MIDI.channels[channel]) return;
		var instrument = MIDI.channels[channel].instrument;
		var id = MIDI.GeneralMIDI.byId[instrument].number;
		note = id + "" + noteReverse[note];
		if (!notes[note]) return;
		if (delay) {
			return window.setTimeout(function() { 
				notes[note].play({ volume: velocity * 2 });
			}, delay * 1000);
		} else {
			notes[note].play({ volume: velocity * 2 });
		}
	};

	root.noteOff = function (channel, note, delay) {

	};

	root.chordOn = function (channel, chord, velocity, delay) {
		if (!MIDI.channels[channel]) return;
		var instrument = MIDI.channels[channel].instrument;
		var id = MIDI.GeneralMIDI.byId[instrument].number;
		for (var key in chord) {
			var n = chord[key];
			var note = id + "" + noteReverse[n];
			if (notes[note]) {
				notes[note].play({ volume: velocity * 2 });
			}
		}
	};

	root.chordOff = function (channel, chord, delay) {

	};

	root.stopAllNotes = function () {

	};

	root.connect = function (conf) {
		soundManager.flashVersion = 9;
		soundManager.useHTML5Audio = true;
		soundManager.url = '../inc/SoundManager2/swf/';
		soundManager.useHighPerformance = true;
		soundManager.wmode = 'transparent';
		soundManager.flashPollingInterval = 1;
		soundManager.debugMode = false;
		soundManager.onload = function () {
			var createBuffer = function(instrument, id, onload) {
				var synth = MIDI.GeneralMIDI.byName[instrument];
				var instrumentId = synth.number;
				notes[instrumentId+""+id] = soundManager.createSound({
					id: id,
					url: MIDI.soundfontUrl + instrument + "-mp3/" + id + ".mp3",
					multiShot: true,
					autoLoad: true,
					onload: onload
				});			
			};
			for (var instrument in MIDI.Soundfont) {
				var loaded = [];
				var onload = function () {
					loaded.push(this.sID);
					if (typeof (MIDI.loader) === "undefined") return;
					MIDI.loader.update(null, "Processing: " + this.sID);
				};
				for (var i = 0; i < 88; i++) {
					var id = noteReverse[i + 21];
					createBuffer(instrument, id, onload);
				}
			}
			///
			setPlugin(root);
			//
			var interval = window.setInterval(function () {
				if (loaded.length !== 88) return;
				window.clearInterval(interval);
				if (conf.callback) conf.callback();
			}, 25);
		};
		soundManager.onerror = function () {

		};
		for (var key in MIDI.keyToNote) {
			noteReverse[MIDI.keyToNote[key]] = key;
		}
	};
})();

/*
	helper functions
*/

// instrument-tracker
MIDI.GeneralMIDI = (function (arr) {
	var clean = function(v) {
		return v.replace(/[^a-z0-9 ]/gi, "").replace(/[ ]/g, "_").toLowerCase();
	};
	var ret = {
		byName: {},
		byId: {},
		byCategory: {}
	};
	for (var key in arr) {
		var list = arr[key];
		for (var n = 0, length = list.length; n < length; n++) {
			var instrument = list[n];
			if (!instrument) continue;
			var num = parseInt(instrument.substr(0, instrument.indexOf(" ")), 10);
			instrument = instrument.replace(num + " ", "");
			ret.byId[--num] = 
			ret.byName[clean(instrument)] = 
			ret.byCategory[clean(key)] = {
				id: clean(instrument),
				instrument: instrument,
				number: num,
				category: key
			};
		}
	}
	return ret;
})({
	'Piano': ['1 Acoustic Grand Piano', '2 Bright Acoustic Piano', '3 Electric Grand Piano', '4 Honky-tonk Piano', '5 Electric Piano 1', '6 Electric Piano 2', '7 Harpsichord', '8 Clavinet'],
	'Chromatic Percussion': ['9 Celesta', '10 Glockenspiel', '11 Music Box', '12 Vibraphone', '13 Marimba', '14 Xylophone', '15 Tubular Bells', '16 Dulcimer'],
	'Organ': ['17 Drawbar Organ', '18 Percussive Organ', '19 Rock Organ', '20 Church Organ', '21 Reed Organ', '22 Accordion', '23 Harmonica', '24 Tango Accordion'],
	'Guitar': ['25 Acoustic Guitar (nylon)', '26 Acoustic Guitar (steel)', '27 Electric Guitar (jazz)', '28 Electric Guitar (clean)', '29 Electric Guitar (muted)', '30 Overdriven Guitar', '31 Distortion Guitar', '32 Guitar Harmonics'],
	'Bass': ['33 Acoustic Bass', '34 Electric Bass (finger)', '35 Electric Bass (pick)', '36 Fretless Bass', '37 Slap Bass 1', '38 Slap Bass 2', '39 Synth Bass 1', '40 Synth Bass 2'],
	'Strings': ['41 Violin', '42 Viola', '43 Cello', '44 Contrabass', '45 Tremolo Strings', '46 Pizzicato Strings', '47 Orchestral Harp', '48 Timpani'],
	'Ensemble': ['49 String Ensemble 1', '50 String Ensemble 2', '51 Synth Strings 1', '52 Synth Strings 2', '53 Choir Aahs', '54 Voice Oohs', '55 Synth Choir', '56 Orchestra Hit'],
	'Brass': ['57 Trumpet', '58 Trombone', '59 Tuba', '60 Muted Trumpet', '61 French Horn', '62 Brass Section', '63 Synth Brass 1', '64 Synth Brass 2'],
	'Reed': ['65 Soprano Sax', '66 Alto Sax', '67 Tenor Sax', '68 Baritone Sax', '69 Oboe', '70 English Horn', '71 Bassoon', '72 Clarinet'],
	'Pipe': ['73 Piccolo', '74 Flute', '75 Recorder', '76 Pan Flute', '77 Blown Bottle', '78 Shakuhachi', '79 Whistle', '80 Ocarina'],
	'Synth Lead': ['81 Lead 1 (square)', '82 Lead 2 (sawtooth)', '83 Lead 3 (calliope)', '84 Lead 4 (chiff)', '85 Lead 5 (charang)', '86 Lead 6 (voice)', '87 Lead 7 (fifths)', '88 Lead 8 (bass + lead)'],
	'Synth Pad': ['89 Pad 1 (new age)', '90 Pad 2 (warm)', '91 Pad 3 (polysynth)', '92 Pad 4 (choir)', '93 Pad 5 (bowed)', '94 Pad 6 (metallic)', '95 Pad 7 (halo)', '96 Pad 8 (sweep)'],
	'Synth Effects': ['97 FX 1 (rain)', '98 FX 2 (soundtrack)', '99 FX 3 (crystal)', '100 FX 4 (atmosphere)', '101 FX 5 (brightness)', '102 FX 6 (goblins)', '103 FX 7 (echoes)', '104 FX 8 (sci-fi)'],
	'Ethnic': ['105 Sitar', '106 Banjo', '107 Shamisen', '108 Koto', '109 Kalimba', '110 Bagpipe', '111 Fiddle', '112 Shanai'],
	'Percussive': ['113 Tinkle Bell', '114 Agogo', '115 Steel Drums', '116 Woodblock', '117 Taiko Drum', '118 Melodic Tom', '119 Synth Drum'],
	'Sound effects': ['120 Reverse Cymbal', '121 Guitar Fret Noise', '122 Breath Noise', '123 Seashore', '124 Bird Tweet', '125 Telephone Ring', '126 Helicopter', '127 Applause', '128 Gunshot']
});

// channel-tracker
MIDI.channels = (function () { // 0 - 15 channels
	var channels = {};
	for (var n = 0; n < 16; n++) {
		channels[n] = { // default values
			instrument: 0,
			// Acoustic Grand Piano
			mute: false,
			mono: false,
			omni: false,
			solo: false
		};
	}
	return channels;
})();

//
MIDI.pianoKeyOffset = 21;

// note conversions
MIDI.keyToNote = {}; // C8  == 108
MIDI.noteToKey = {}; // 108 ==  C8
(function () {
	var A0 = 0x15; // first note
	var C8 = 0x6C; // last note
	var number2key = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
	for (var n = A0; n <= C8; n++) {
		var octave = (n - 12) / 12 >> 0;
		var name = number2key[n % 12] + octave;
		MIDI.keyToNote[name] = n;
		MIDI.noteToKey[n] = name;
	}
})();

})();/*
	-------------------------------------
	MIDI.Player : 0.3
	-------------------------------------
	https://github.com/mudcube/MIDI.js
	-------------------------------------
	#jasmid
	-------------------------------------
*/

if (typeof (MIDI) === "undefined") var MIDI = {};
if (typeof (MIDI.Player) === "undefined") MIDI.Player = {};

(function() { "use strict";

var root = MIDI.Player;
root.callback = undefined; // your custom callback goes here!
root.currentTime = 0;
root.endTime = 0; 
root.restart = 0; 
root.playing = false;
root.timeWarp = 1;

//
root.start =
root.resume = function () {
	if (root.currentTime < -1) root.currentTime = -1;
	startAudio(root.currentTime);
};

root.pause = function () {
	var tmp = root.restart;
	stopAudio();
	root.restart = tmp;
};

root.stop = function () {
	stopAudio();
	root.restart = 0;
	root.currentTime = 0;
};

root.addListener = function(callback) {
	onMidiEvent = callback;
};

root.removeListener = function() {
	onMidiEvent = undefined;
};

root.clearAnimation = function() {
	if (root.interval)  {
		window.clearInterval(root.interval);
	}
};

root.setAnimation = function(config) {
	var callback = (typeof(config) === "function") ? config : config.callback;
	var interval = config.interval || 30;
	var currentTime = 0;
	var tOurTime = 0;
	var tTheirTime = 0;
	//
	root.clearAnimation();
	root.interval = window.setInterval(function () {
		if (root.endTime === 0) return;
		if (root.playing) {
			currentTime = (tTheirTime === root.currentTime) ? tOurTime - (new Date).getTime() : 0;
			if (root.currentTime === 0) {
				currentTime = 0;
			} else {
				currentTime = root.currentTime - currentTime;
			}
			if (tTheirTime !== root.currentTime) {
				tOurTime = (new Date).getTime();
				tTheirTime = root.currentTime;
			}
		} else { // paused
			currentTime = root.currentTime;
		}
		var endTime = root.endTime;
		var percent = currentTime / endTime;
		var total = currentTime / 1000;
		var minutes = total / 60;
		var seconds = total - (minutes * 60);
		var t1 = minutes * 60 + seconds;
		var t2 = (endTime / 1000);
		if (t2 - t1 < -1) return;
		callback({
			now: t1,
			end: t2,
			events: noteRegistrar
		});
	}, interval);
};

// helpers

root.loadMidiFile = function() { // reads midi into javascript array of events
	root.replayer = new Replayer(MidiFile(root.currentData), root.timeWarp);
	root.data = root.replayer.getData();
	root.endTime = getLength();
};

root.loadFile = function (file, callback) {
	root.stop();
	if (file.indexOf("base64,") !== -1) {
		var data = window.atob(file.split(",")[1]);
		root.currentData = data;
		root.loadMidiFile();
		if (callback) callback(data);
		return;
	}
	///
	var fetch = new XMLHttpRequest();
	fetch.open('GET', file);
	fetch.overrideMimeType("text/plain; charset=x-user-defined");
	fetch.onreadystatechange = function () {
		if (this.readyState === 4 && this.status === 200) {
			var t = this.responseText || "";
			var ff = [];
			var mx = t.length;
			var scc = String.fromCharCode;
			for (var z = 0; z < mx; z++) {
				ff[z] = scc(t.charCodeAt(z) & 255);
			}
			var data = ff.join("");
			root.currentData = data;
			root.loadMidiFile();
			if (callback) callback(data);
		}
	};
	fetch.send();
};

// Playing the audio

var eventQueue = []; // hold events to be triggered
var queuedTime; // 
var startTime = 0; // to measure time elapse
var noteRegistrar = {}; // get event for requested note
var onMidiEvent = undefined; // listener callback
var scheduleTracking = function (channel, note, currentTime, offset, message, velocity) {
	var interval = window.setTimeout(function () {
		var data = {
			channel: channel,
			note: note,
			now: currentTime,
			end: root.endTime,
			message: message,
			velocity: velocity
		};
		//
		if (message === 128) {
			delete noteRegistrar[note];
		} else {
			noteRegistrar[note] = data;
		}
		if (onMidiEvent) {
			onMidiEvent(data);
		}
		root.currentTime = currentTime;
		if (root.currentTime === queuedTime && queuedTime < root.endTime) { // grab next sequence
			startAudio(queuedTime, true);
		}
	}, currentTime - offset);
	return interval;
};

var getContext = function() {
	if (MIDI.lang === 'WebAudioAPI') {
		return MIDI.Player.ctx;
	} else if (!root.ctx) {
		root.ctx = { currentTime: 0 };
	}
	return root.ctx;
};

var getLength = function() {
	var data =  root.data;
	var length = data.length;
	var totalTime = 0.5;
	for (var n = 0; n < length; n++) {
		totalTime += data[n][1];
	}
	return totalTime;
};

var startAudio = function (currentTime, fromCache) {
	if (!root.replayer) return;
	if (!fromCache) {
		if (typeof (currentTime) === "undefined") currentTime = root.restart;
		if (root.playing) stopAudio();
		root.playing = true;
		root.data = root.replayer.getData();
		root.endTime = getLength();
	}
	var note;
	var offset = 0;
	var messages = 0;
	var data = root.data;	
	var ctx = getContext();
	var length = data.length;
	//
	queuedTime = 0.5;
	startTime = ctx.currentTime;
	//
	for (var n = 0; n < length && messages < 100; n++) {
		queuedTime += data[n][1];
		if (queuedTime < currentTime) {
			offset = queuedTime;
			continue;
		}
		currentTime = queuedTime - offset;
		var event = data[n][0].event;
		if (event.type !== "channel") continue;
		var channel = event.channel;
		switch (event.subtype) {
			case 'noteOn':
				if (MIDI.channels[channel].mute) break;
				note = event.noteNumber - (root.MIDIOffset || 0);
				eventQueue.push({
					event: event,
					source: MIDI.noteOn(channel, event.noteNumber, event.velocity, currentTime / 1000 + ctx.currentTime),
					interval: scheduleTracking(channel, note, queuedTime, offset, 144, event.velocity)
				});
				messages ++;
				break;
			case 'noteOff':
				if (MIDI.channels[channel].mute) break;
				note = event.noteNumber - (root.MIDIOffset || 0);
				eventQueue.push({
					event: event,
					source: MIDI.noteOff(channel, event.noteNumber, currentTime / 1000 + ctx.currentTime),
					interval: scheduleTracking(channel, note, queuedTime, offset, 128)
				});
				break;
			default:
				break;
		}
	}
};

var stopAudio = function () {
	var ctx = getContext();
	root.playing = false;
	root.restart += (ctx.currentTime - startTime) * 1000;
	// stop the audio, and intervals
	while (eventQueue.length) {
		var o = eventQueue.pop();
		window.clearInterval(o.interval);
		if (!o.source) continue; // is not webaudio
		if (typeof(o.source) === "number") {
			window.clearTimeout(o.source);
		} else { // webaudio
			var source = o.source;
			source.disconnect(0);
			source.noteOff(0);
		}
	}
	// run callback to cancel any notes still playing
	for (var key in noteRegistrar) {
		var o = noteRegistrar[key]
		if (noteRegistrar[key].message === 144 && onMidiEvent) {
			onMidiEvent({
				channel: o.channel,
				note: o.note,
				now: o.now,
				end: o.end,
				message: 128,
				velocity: o.velocity
			});
		}
	}
	// reset noteRegistrar
	noteRegistrar = {};
};

})();/*

	DOMLoader.XMLHttp
	--------------------------
	DOMLoader.sendRequest({
		url: "./dir/something.extension",
		data: "test!",
		onerror: function(event) {
			console.log(event);
		},
		onload: function(response) {
			console.log(response.responseText);
		}, 
		onprogress: function (event) {
			var percent = event.loaded / event.total * 100 >> 0;
			loader.message("loading: " + percent + "%");
		}
	});
	
*/

if (typeof(DOMLoader) === "undefined") var DOMLoader = {};

// Add XMLHttpRequest when not available

if (typeof (XMLHttpRequest) === "undefined") {
	var XMLHttpRequest;
	(function () { // find equivalent for IE
		var factories = [
		function () {
			return new ActiveXObject("Msxml2.XMLHTTP")
		}, function () {
			return new ActiveXObject("Msxml3.XMLHTTP")
		}, function () {
			return new ActiveXObject("Microsoft.XMLHTTP")
		}];
		for (var i = 0; i < factories.length; i++) {
			try {
				factories[i]();
			} catch (e) {
				continue;
			}
			break;
		}
		XMLHttpRequest = factories[i];
	})();
}

if (typeof ((new XMLHttpRequest()).responseText) === "undefined") {
	// http://stackoverflow.com/questions/1919972/how-do-i-access-xhr-responsebody-for-binary-data-from-javascript-in-ie
    var IEBinaryToArray_ByteStr_Script =
    "<!-- IEBinaryToArray_ByteStr -->\r\n"+
    "<script type='text/vbscript'>\r\n"+
    "Function IEBinaryToArray_ByteStr(Binary)\r\n"+
    "   IEBinaryToArray_ByteStr = CStr(Binary)\r\n"+
    "End Function\r\n"+
    "Function IEBinaryToArray_ByteStr_Last(Binary)\r\n"+
    "   Dim lastIndex\r\n"+
    "   lastIndex = LenB(Binary)\r\n"+
    "   if lastIndex mod 2 Then\r\n"+
    "       IEBinaryToArray_ByteStr_Last = Chr( AscB( MidB( Binary, lastIndex, 1 ) ) )\r\n"+
    "   Else\r\n"+
    "       IEBinaryToArray_ByteStr_Last = "+'""'+"\r\n"+
    "   End If\r\n"+
    "End Function\r\n"+
    "</script>\r\n";

	// inject VBScript
	document.write(IEBinaryToArray_ByteStr_Script);

	DOMLoader.sendRequest = function(conf) {
		// helper to convert from responseBody to a "responseText" like thing
		function getResponseText(binary) {
			var byteMapping = {};
			for (var i = 0; i < 256; i++) {
				for (var j = 0; j < 256; j++) {
					byteMapping[String.fromCharCode(i + j * 256)] = String.fromCharCode(i) + String.fromCharCode(j);
				}
			}
			// call into VBScript utility fns
			var rawBytes = IEBinaryToArray_ByteStr(binary);
			var lastChr = IEBinaryToArray_ByteStr_Last(binary);
			return rawBytes.replace(/[\s\S]/g, function (match) {
				return byteMapping[match];
			}) + lastChr;
		};
		//
		var req = XMLHttpRequest();
		req.open("GET", conf.url, true);
		if (conf.responseType) req.responseType = conf.responseType;
		if (conf.onerror) req.onerror = conf.onerror;
		if (conf.onprogress) req.onprogress = conf.onprogress;
		req.onreadystatechange = function (event) {
			if (req.readyState === 4) {
				if (req.status === 200) {
					req.responseText = getResponseText(req.responseBody);
				} else {
					req = false;
				}
				if (conf.onload) conf.onload(req);
			}
		};
		req.setRequestHeader("Accept-Charset", "x-user-defined");
		req.send(null);
		return req;
	}
} else {
	DOMLoader.sendRequest = function(conf) {
		var req = new XMLHttpRequest();
		req.open(conf.data ? "POST" : "GET", conf.url, true);
		if (req.overrideMimeType) req.overrideMimeType("text/plain; charset=x-user-defined");
		if (conf.data) req.setRequestHeader('Content-type','application/x-www-form-urlencoded');
		if (conf.responseType) req.responseType = conf.responseType;
		if (conf.onerror) req.onerror = conf.onerror;
		if (conf.onprogress) req.onprogress = conf.onprogress;
		req.onreadystatechange = function (event) {
			if (req.readyState === 4) {
				if (req.status !== 200 && req.status != 304) {
					if (conf.onerror) conf.onerror(event, false);
					return;
				}
				if (conf.onload) {
					conf.onload(req);
				}
			}
		};
		req.send(conf.data);
		return req;
	};
}/*
	----------------------------------------------------
	DOMLoader.script.js : 0.1.2 : 2012/09/08 : http://mudcu.be
	----------------------------------------------------
	Copyright 2011-2012 Mudcube. All rights reserved.
	----------------------------------------------------
	/// No verification
	DOMLoader.script.add("../js/jszip/jszip.js");
	/// Strict loading order and verification.
	DOMLoader.script.add({
		strictOrder: true,
		srcs: [
			{
				src: "../js/jszip/jszip.js",
				verify: "JSZip",
				callback: function() {
					console.log(1)
				}
			},
			{ 
				src: "../inc/downloadify/js/swfobject.js",
				verify: "swfobject",
				callback: function() {
					console.log(2)
				}
			}
		],
		callback: function() {
			console.log(3)
		}
	});
	/// Just verification.
	DOMLoader.script.add({
		src: "../js/jszip/jszip.js",
		verify: "JSZip",
		callback: function() {
			console.log(1)
		}
	});
*/

if (typeof(DOMLoader) === "undefined") var DOMLoader = {};

(function() { "use strict";

DOMLoader.script = function() {
	this.loaded = {};
	this.loading = {};
	return this;
};

DOMLoader.script.prototype.add = function(config) {
	var that = this;
	if (typeof(config) === "string") {
		config = { src: config };
	}
	var srcs = config.srcs;
	if (typeof(srcs) === "undefined") {
		srcs = [{ 
			src: config.src, 
			verify: config.verify
		}];
	}
	/// adding the elements to the head
	var doc = document.getElementsByTagName("head")[0];
	/// 
	var testElement = function(element, test) {
		if (that.loaded[element.src]) return;
		if (test && typeof(window[test]) === "undefined") return;
		that.loaded[element.src] = true;
		//
		if (that.loading[element.src]) that.loading[element.src]();
		delete that.loading[element.src];
		//
		if (element.callback) element.callback();
		if (typeof(getNext) !== "undefined") getNext();
	};
	///
	var batchTest = [];
	var addElement = function(element) {
		if (typeof(element) === "string") {
			element = {
				src: element,
				verify: config.verify
			};
		}
		if (/([\w\d.])$/.test(element.verify)) { // check whether its a variable reference
			element.test = element.verify;
			if (typeof(element.test) === "object") {
				for (var key in element.test) {
					batchTest.push(element.test[key]);
				}			
			} else {
				batchTest.push(element.test);
			}
		}
		if (that.loaded[element.src]) return;
		var script = document.createElement("script");
		script.onreadystatechange = function() {
			if (this.readyState !== "loaded" && this.readyState !== "complete") return;
			testElement(element);
		};
		script.onload = function() {
			testElement(element);
		};
		script.onerror = function() {

		};
		script.setAttribute("type", "text/javascript");
		script.setAttribute("src", element.src);
		doc.appendChild(script);
		that.loading[element.src] = function() {};
	};
	/// checking to see whether everything loaded properly
	var onLoad = function(element) {
		if (element) {
			testElement(element, element.test);
		} else {
			for (var n = 0; n < srcs.length; n ++) {
				testElement(srcs[n], srcs[n].test);
			}
		}
		var istrue = true;
		for (var n = 0; n < batchTest.length; n ++) {
			var test = batchTest[n];
			if (test && test.indexOf(".") !== -1) {
				test = test.split(".");
				var level0 = window[test[0]];
				if (typeof(level0) === "undefined") continue;
				if (test.length === 2) { //- this is a bit messy and could handle more cases
					if (typeof(level0[test[1]]) === "undefined") {
						istrue = false;
					}
				} else if (test.length === 3) {
					if (typeof(level0[test[1]][test[2]]) === "undefined") {
						istrue = false;
					}
				}
			} else {
				if (typeof(window[test]) === "undefined") {
					istrue = false;
				}
			}
		}
		if (!config.strictOrder && istrue) { // finished loading all the requested scripts
			if (config.callback) config.callback();
		} else { // keep calling back the function
			setTimeout(function() { //- should get slower over time?
				onLoad(element);
			}, 10);
		}
	};
	/// loading methods;  strict ordering or loose ordering
	if (config.strictOrder) {
		var ID = -1;
		var getNext = function() {
			ID ++;
			if (!srcs[ID]) { // all elements are loaded
				if (config.callback) config.callback();
			} else { // loading new script
				var element = srcs[ID];
				var src = element.src;
				if (that.loading[src]) { // already loading from another call (attach to event)
					that.loading[src] = function() {
						if (element.callback) element.callback();
						getNext();
					}
				} else if (!that.loaded[src]) { // create script element
					addElement(element);
					onLoad(element);
				} else { // it's already been successfully loaded
					getNext();
				}
			}
		};
		getNext();
	} else { // loose ordering
		for (var ID = 0; ID < srcs.length; ID ++) {
			addElement(srcs[ID]);
		}
		onLoad();
	}
};

DOMLoader.script = (new DOMLoader.script());

})();/// http://cwilso.github.com/WebMIDIAPIShim

// Initialize the MIDI library.
(function (global, exports, perf) {
    'use strict';
    var midiIO,
    debug = false;
    if (debug) {
        window.console.warn('Debuggin enabled');
    }

//init: create plugin
    if (!window.navigator.requestMIDIAccess) {
      window.navigator.requestMIDIAccess = _requestMIDIAccess;
      if (!window.navigator.getMIDIAccess)
        window.navigator.getMIDIAccess = _getMIDIAccess;
    }

  function _JazzInstance() {
    this.inputInUse = false;
    this.outputInUse = false;

    // load the Jazz plugin
    var o1 = document.createElement("object");
    o1.style.cssText = "top: -500px; position: absolute;";
    o1.id = "_Jazz" + Math.random() + "ie";
    o1.classid = "CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90";

    this.activeX = o1;

    var o2 = document.createElement("object");
    o2.id = "_Jazz" + Math.random; 
    o2.type="audio/x-jazz";
    o1.appendChild(o2);

    this.objRef = o2;

    var e = document.createElement("p");
    e.appendChild(document.createTextNode("This page requires the "));

    var a = document.createElement("a");
    a.appendChild(document.createTextNode("Jazz plugin"));
    a.href = "http://jazz-soft.net/";

    e.appendChild(a);
    e.appendChild(document.createTextNode("."));
    o2.appendChild(e);

    var insertionPoint = document.getElementById("MIDIPlugin");
    if (!insertionPoint)
        insertionPoint = document.body;
    insertionPoint.appendChild(o1);

    if (this.objRef.isJazz)
      this._Jazz = this.objRef;
    else if (this.activeX.isJazz)
      this._Jazz = this.activeX;
    else
      this._Jazz = null;
    if (this._Jazz) {
      this._Jazz._jazzTimeZero = this._Jazz.Time();
      this._Jazz._perfTimeZero = window.performance.now();
    }
  }

  function _requestMIDIAccess( successCallback, errorCallback ) {
      new MIDIAccess( successCallback, errorCallback );
  }

  function _getMIDIAccess( successCallback, errorCallback ) {
      var message = "getMIDIAccess has been renamed to requestMIDIAccess.  Please update your code.";
      
      if (console.warn)
        console.warn( message );
      else
        console.log( message );
      new MIDIAccess( successCallback, errorCallback );
  }

  // API Methods

  function MIDIAccess( successCallback, errorCallback ) {
      this._jazzInstances = new Array();
      this._jazzInstances.push( new _JazzInstance() );

      if (this._jazzInstances[0]._Jazz) {
        this._Jazz = this._jazzInstances[0]._Jazz;
        this._successCallback = successCallback;
        window.setTimeout( _onReady.bind(this), 3 );
      } else {
          if (errorCallback)
            errorCallback( { code: 1 } );
      }
  }

  function _onReady() {
      if (this._successCallback)
          this._successCallback( this );
  }

  MIDIAccess.prototype.getInputs = function(  ) {
      if (!this._Jazz)
          return null;
      var list=this._Jazz.MidiInList();
      var inputs = new Array( list.length );
    
      for ( var i=0; i<list.length; i++ ) {
          inputs[i] = new MIDIPort( this, list[i], i, "input" );
      }
      return inputs;
  }

  MIDIAccess.prototype.getOutputs = function(  ) {
      if (!this._Jazz)
          return null;
      var list=this._Jazz.MidiOutList();
      var outputs = new Array( list.length );
    
      for ( var i=0; i<list.length; i++ ) {
          outputs[i] = new MIDIPort( this, list[i], i, "output" );
      }
      return outputs;
  }

  // TODO: remove these versions
  MIDIAccess.prototype.enumerateInputs = function(  ) {
    var message = "MIDIAccess.enumerateInputs has been renamed to MIDIAccess.getInputs.  Please update your code.";
    
    if (console.warn)
      console.warn( message );
    else
      console.log( message );
    return this.getInputs();
  }

  MIDIAccess.prototype.enumerateOutputs = function(  ) {
    var message = "MIDIAccess.enumerateOutputs has been renamed to MIDIAccess.getOutputs.  Please update your code.";
    
    if (console.warn)
      console.warn( message );
    else
      console.log( message );
    return this.getOutputs();
  }

  MIDIAccess.prototype.getInput = function( target ) {
      if (target==null)
          return null;
      return new MIDIInput( this, target );
  }

  MIDIAccess.prototype.getOutput = function( target ) {
      if (target==null)
          return null;
      return new MIDIOutput( this, target );
  }

  function MIDIPort( midi, port, index, type ) {
      this._index = index;
      this._midi = midi;
      this.type = type;

      // Can't get manu/version from Jazz
      this.name = port;
      this.manufacturer = "<manufacturer unknown>";
      this.version = "<version not supported>";
      this.fingerprint = "" + index + "." + this.name;
  }

  MIDIPort.prototype.toString = function() {
      return ("type: "+ this.type + "name: '" + this.name + "' manufacturer: '" + 
      this.manufacturer + "' version: " + this.version + " fingerprint: '" + this.fingerprint + "'" );
  }

  function MIDIInput( midiAccess, target ) {
    this.onmessage = null;
    this._listeners = [];
    this._midiAccess = midiAccess;

    var inputInstance = null;
    for (var i=0; (i<midiAccess._jazzInstances.length)&&(!inputInstance); i++) {
      if (!midiAccess._jazzInstances[i].inputInUse)
        inputInstance=midiAccess._jazzInstances[i];
    }
    if (!inputInstance) {
      inputInstance = new _JazzInstance();
      midiAccess._jazzInstances.push( inputInstance );
    }
    inputInstance.inputInUse = true;

    this._jazzInstance = inputInstance._Jazz;

    // target can be a MIDIPort or DOMString 
    if ( target instanceof MIDIPort ) {
      this._deviceName = target.name;
      this._index = target._index;
    } else if (typeof target === "number") { // target is numerical index
      this._index = target;
      var list=this._jazzInstance.MidiInList();
      this._deviceName = list[target];
    } else if ( target.isString() ) { // fingerprint 
      var dot = target.indexOf(".");
      this._index = parseInt( target.slice( 0, dot ) );
      this._deviceName = target.slice( dot + 1 );
    }

    this._input = this._jazzInstance.MidiInOpen( this._index, _midiProc.bind(this) );
  }

  // Introduced in DOM Level 2:
  MIDIInput.prototype.addEventListener = function (type, listener, useCapture ) {
    if (type != "message")
      return;
    for (var i=0; i<this._listeners.length; i++)
      if (this._listeners[i] == listener)
        return;
    this._listeners.push( listener );
  }

  MIDIInput.prototype.removeEventListener = function (type, listener, useCapture ) {
    if (type != "message")
      return;
    for (var i=0; i<this._listeners.length; i++)
      if (this._listeners[i] == listener) {
        this._listeners.splice( i, 1 );  //remove it
        return;
      }
  }

  MIDIInput.prototype.preventDefault = function() {
    this._pvtDef = true;
  }

  MIDIInput.prototype.dispatchEvent = function (evt) {
    this._pvtDef = false;

    // dispatch to listeners
    for (var i=0; i<this._listeners.length; i++)
      if (this._listeners[i].handleEvent)
        this._listeners[i].handleEvent.bind(this)( evt );
      else
        this._listeners[i].bind(this)( evt );

    if (this.onmessage)
      this.onmessage( evt );

    return this._pvtDef;
  }

  function _midiProc( timestamp, data ) {
    var evt = new CustomEvent( "message" );
    evt.timestamp = parseFloat( timestamp.toString()) + this._jazzInstance._perfTimeZero;
    var length = 0;
    var i,j;

    // Jazz sometimes passes us multiple messages at once, so we need to parse them out
    // and pass them one at a time.
    for (i=0; i<data.length; i+=length) {
      switch (data[i] & 0xF0) {
        case 0x80:  // note off
        case 0x90:  // note on
        case 0xA0:  // polyphonic aftertouch 
        case 0xB0:  // control change
        case 0xE0:  // channel mode
          length = 3;
          break;

        case 0xC0:  // program change
        case 0xD0:  // channel aftertouch
          length = 2;
          break;

        case 0xF0:
          switch (data[i]) {
            case 0xf0:  // variable-length sysex.
              // count the length;
              length = -1;
              for (j=i+1; (j<data.length) && (data[j] != 0xF7); j++)
                ;
              length = j-i+1;
              break;

            case 0xF1:  // MTC quarter frame
            case 0xF3:  // song select
              length = 2;
              break;

            case 0xF2:  // song position pointer
              length = 3;
              break;

            default:
              length = 1;
              break;
          }
          break;
      }
      evt.data = new Uint8Array(data.slice(i, length+i));
      this.dispatchEvent( evt );
    }
  }

  function MIDIOutput( midiAccess, target ) {
    this._midiAccess = midiAccess;

    var outputInstance = null;
    for (var i=0; (i<midiAccess._jazzInstances.length)&&(!outputInstance); i++) {
      if (!midiAccess._jazzInstances[i].outputInUse)
        outputInstance=midiAccess._jazzInstances[i];
    }
    if (!outputInstance) {
      outputInstance = new _JazzInstance();
      midiAccess._jazzInstances.push( outputInstance );
    }
    outputInstance.outputInUse = true;

    this._jazzInstance = outputInstance._Jazz;

    // target can be a MIDIPort or DOMString 
    if ( target instanceof MIDIPort ) {
      this._deviceName = target.name;
      this._index = target._index;
    } else if (typeof target === "number") { // target is numerical index
      this._index = target;
      var list=this._jazzInstance.MidiOutList();
      this._deviceName = list[target];
    } else if ( target.isString() ) { // fingerprint 
      var dot = target.indexOf(".");
      this._index = parseInt( target.slice( 0, dot ) );
      this._deviceName = target.slice( dot + 1 );
    }

    this._jazzInstance.MidiOutOpen(this._deviceName);
  }

  function _sendLater() {
      this.jazz.MidiOutLong( this.data );    // handle send as sysex
  }

  MIDIOutput.prototype.send = function( data, timestamp ) {
    var delayBeforeSend = 0;
    if (data.length==0)
      return false;

    if (timestamp)
      delayBeforeSend = Math.floor( timestamp - window.performance.now() );

    if (timestamp && (delayBeforeSend>1)) {
      var sendObj = new Object;
      sendObj.jazz = this._jazzInstance;
      sendObj.data = data;

      window.setTimeout( _sendLater.bind(sendObj), delayBeforeSend );
    } else {
      this._jazzInstance.MidiOutLong( data );
    }
    return true;
  }

}(window));

// Polyfill window.performance.now() if necessary.
(function (exports) {
    var perf = {},
        props;

    function findAlt() {
        var prefix = "moz,webkit,opera,ms".split(","),
            i = prefix.length,
            //worst case, we use Date.now()
            props = { 
                value: function (start) {
                    return function () {
                        return Date.now() - start;
                    }
                }(Date.now())
            };

        //seach for vendor prefixed version  
        for (; i >= 0; i--) {
            if ((prefix[i] + "Now") in exports.performance) {
                props.value = function (method) {
                    return function () {
                        exports.performance[method]();
                    }
                }(prefix[i] + "Now");
                return props;
            }
        }

        //otherwise, try to use connectionStart 
        if ("timing" in exports.performance &&
            "connectStart" in exports.performance.timing) {
            //this pretty much approximates performance.now() to the millisecond
            props.value = function (start) {
                return function(){Date.now() - start;}
            }(exports.performance.timing.connectStart);
        }
        return props;
    }

    //if already defined, bail    
    if (("performance" in exports) && ("now" in exports.performance)) {
        return;
    }
    if (!("performance" in exports)) {
        Object.defineProperty(exports, "performance", {
            get: function () {
                return perf;
            }
        });
        //otherwise, perforance is there, but not "now()"    
    } 
    props = findAlt(); 
    Object.defineProperty(exports.performance, "now", props);
}(window));



// http://ntt.cc/2008/01/19/base64-encoder-decoder-with-javascript.html

// window.atob and window.btoa

(function (window) {

	var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	
	window.btoa || (window.btoa = function encode64(input) {
		input = escape(input);
		var output = "";
		var chr1, chr2, chr3 = "";
		var enc1, enc2, enc3, enc4 = "";
		var i = 0;
		do {
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
			output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
			chr1 = chr2 = chr3 = "";
			enc1 = enc2 = enc3 = enc4 = "";
		} while (i < input.length);
		return output;
	});
	
	window.atob || (window.atob = function(input) {
		var output = "";
		var chr1, chr2, chr3 = "";
		var enc1, enc2, enc3, enc4 = "";
		var i = 0;
		// remove all characters that are not A-Z, a-z, 0-9, +, /, or =
		var base64test = /[^A-Za-z0-9\+\/\=]/g;
		if (base64test.exec(input)) {
			alert("There were invalid base64 characters in the input text.\n" + "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" + "Expect errors in decoding.");
		}
		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
		do {
			enc1 = keyStr.indexOf(input.charAt(i++));
			enc2 = keyStr.indexOf(input.charAt(i++));
			enc3 = keyStr.indexOf(input.charAt(i++));
			enc4 = keyStr.indexOf(input.charAt(i++));
			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;
			output = output + String.fromCharCode(chr1);
			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}
			chr1 = chr2 = chr3 = "";
			enc1 = enc2 = enc3 = enc4 = "";
		} while (i < input.length);
		return unescape(output);
	});

}(this));/*
Copyright (c) 2011, Daniel Guerrero
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Daniel Guerrero nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL DANIEL GUERRERO BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
 
var Base64Binary = {
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

	/* will return a  Uint8Array type */
	decodeArrayBuffer: function(input) {
		var bytes = Math.ceil( (3*input.length) / 4.0);
		var ab = new ArrayBuffer(bytes);
		this.decode(input, ab);

		return ab;
	},

	decode: function(input, arrayBuffer) {
		//get last chars to see if are valid
		var lkey1 = this._keyStr.indexOf(input.charAt(input.length-1));		 
		var lkey2 = this._keyStr.indexOf(input.charAt(input.length-1));		 

		var bytes = Math.ceil( (3*input.length) / 4.0);
		if (lkey1 == 64) bytes--; //padding chars, so skip
		if (lkey2 == 64) bytes--; //padding chars, so skip

		var uarray;
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
		var j = 0;

		if (arrayBuffer)
			uarray = new Uint8Array(arrayBuffer);
		else
			uarray = new Uint8Array(bytes);

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		for (i=0; i<bytes; i+=3) {	
			//get the 3 octects in 4 ascii chars
			enc1 = this._keyStr.indexOf(input.charAt(j++));
			enc2 = this._keyStr.indexOf(input.charAt(j++));
			enc3 = this._keyStr.indexOf(input.charAt(j++));
			enc4 = this._keyStr.indexOf(input.charAt(j++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			uarray[i] = chr1;			
			if (enc3 != 64) uarray[i+1] = chr2;
			if (enc4 != 64) uarray[i+2] = chr3;
		}

		return uarray;	
	}
};//v.3.5 build 120731

/*
Copyright DHTMLX LTD. http://www.dhtmlx.com
You allowed to use this component or parts of it under GPL terms
To use it on other terms or get Professional edition of the component please contact us at sales@dhtmlx.com
*/
dhtmlx=function(a){for(var b in a)dhtmlx[b]=a[b];return dhtmlx};dhtmlx.extend_api=function(a,b,c){var d=window[a];if(d)window[a]=function(a){if(a&&typeof a=="object"&&!a.tagName){var c=d.apply(this,b._init?b._init(a):arguments),f;for(f in dhtmlx)if(b[f])this[b[f]](dhtmlx[f]);for(f in a)if(b[f])this[b[f]](a[f]);else f.indexOf("on")==0&&this.attachEvent(f,a[f])}else c=d.apply(this,arguments);b._patch&&b._patch(this);return c||this},window[a].prototype=d.prototype,c&&dhtmlXHeir(window[a].prototype,c)};
dhtmlxAjax={get:function(a,b){var c=new dtmlXMLLoaderObject(!0);c.async=arguments.length<3;c.waitCall=b;c.loadXML(a);return c},post:function(a,b,c){var d=new dtmlXMLLoaderObject(!0);d.async=arguments.length<4;d.waitCall=c;d.loadXML(a,!0,b);return d},getSync:function(a){return this.get(a,null,!0)},postSync:function(a,b){return this.post(a,b,null,!0)}};
function dtmlXMLLoaderObject(a,b,c,d){this.xmlDoc="";this.async=typeof c!="undefined"?c:!0;this.onloadAction=a||null;this.mainObject=b||null;this.waitCall=null;this.rSeed=d||!1;return this}dtmlXMLLoaderObject.count=0;
dtmlXMLLoaderObject.prototype.waitLoadFunction=function(a){var b=!0;return this.check=function(){if(a&&a.onloadAction!=null&&(!a.xmlDoc.readyState||a.xmlDoc.readyState==4)&&b){b=!1;dtmlXMLLoaderObject.count++;if(typeof a.onloadAction=="function")a.onloadAction(a.mainObject,null,null,null,a);if(a.waitCall)a.waitCall.call(this,a),a.waitCall=null}}};
dtmlXMLLoaderObject.prototype.getXMLTopNode=function(a,b){if(this.xmlDoc.responseXML){var c=this.xmlDoc.responseXML.getElementsByTagName(a);c.length==0&&a.indexOf(":")!=-1&&(c=this.xmlDoc.responseXML.getElementsByTagName(a.split(":")[1]));var d=c[0]}else d=this.xmlDoc.documentElement;if(d)return this._retry=!1,d;if(!this._retry)return this._retry=!0,b=this.xmlDoc,this.loadXMLString(this.xmlDoc.responseText.replace(/^[\s]+/,""),!0),this.getXMLTopNode(a,b);dhtmlxError.throwError("LoadXML","Incorrect XML",
[b||this.xmlDoc,this.mainObject]);return document.createElement("DIV")};dtmlXMLLoaderObject.prototype.loadXMLString=function(a,b){if(_isIE)this.xmlDoc=new ActiveXObject("Microsoft.XMLDOM"),this.xmlDoc.async=this.async,this.xmlDoc.onreadystatechange=function(){},this.xmlDoc.loadXML(a);else{var c=new DOMParser;this.xmlDoc=c.parseFromString(a,"text/xml")}if(!b){if(this.onloadAction)this.onloadAction(this.mainObject,null,null,null,this);if(this.waitCall)this.waitCall(),this.waitCall=null}};
dtmlXMLLoaderObject.prototype.loadXML=function(a,b,c,d){this.rSeed&&(a+=(a.indexOf("?")!=-1?"&":"?")+"a_dhx_rSeed="+(new Date).valueOf());this.filePath=a;this.xmlDoc=!_isIE&&window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");if(this.async)this.xmlDoc.onreadystatechange=new this.waitLoadFunction(this);this.xmlDoc.open(b?"POST":"GET",a,this.async);d?(this.xmlDoc.setRequestHeader("User-Agent","dhtmlxRPC v0.1 ("+navigator.userAgent+")"),this.xmlDoc.setRequestHeader("Content-type",
"text/xml")):b&&this.xmlDoc.setRequestHeader("Content-type","application/x-www-form-urlencoded");this.xmlDoc.setRequestHeader("X-Requested-With","XMLHttpRequest");this.xmlDoc.send(c);this.async||(new this.waitLoadFunction(this))()};
dtmlXMLLoaderObject.prototype.destructor=function(){return this.setXSLParamValue=this.getXMLTopNode=this.xmlNodeToJSON=this.doSerialization=this.loadXMLString=this.loadXML=this.doXSLTransToString=this.doXSLTransToObject=this.doXPathOpera=this.doXPath=this.xmlDoc=this.mainObject=this.onloadAction=this.filePath=this.rSeed=this.async=this._retry=this._getAllNamedChilds=this._filterXPath=null};
dtmlXMLLoaderObject.prototype.xmlNodeToJSON=function(a){for(var b={},c=0;c<a.attributes.length;c++)b[a.attributes[c].name]=a.attributes[c].value;b._tagvalue=a.firstChild?a.firstChild.nodeValue:"";for(c=0;c<a.childNodes.length;c++){var d=a.childNodes[c].tagName;d&&(b[d]||(b[d]=[]),b[d].push(this.xmlNodeToJSON(a.childNodes[c])))}return b};function callerFunction(a,b){return this.handler=function(c){if(!c)c=window.event;a(c,b);return!0}}function getAbsoluteLeft(a){return getOffset(a).left}
function getAbsoluteTop(a){return getOffset(a).top}function getOffsetSum(a){for(var b=0,c=0;a;)b+=parseInt(a.offsetTop),c+=parseInt(a.offsetLeft),a=a.offsetParent;return{top:b,left:c}}
function getOffsetRect(a){var b=a.getBoundingClientRect(),c=document.body,d=document.documentElement,e=window.pageYOffset||d.scrollTop||c.scrollTop,g=window.pageXOffset||d.scrollLeft||c.scrollLeft,f=d.clientTop||c.clientTop||0,h=d.clientLeft||c.clientLeft||0,i=b.top+e-f,k=b.left+g-h;return{top:Math.round(i),left:Math.round(k)}}function getOffset(a){return a.getBoundingClientRect?getOffsetRect(a):getOffsetSum(a)}
function convertStringToBoolean(a){typeof a=="string"&&(a=a.toLowerCase());switch(a){case "1":case "true":case "yes":case "y":case 1:case !0:return!0;default:return!1}}function getUrlSymbol(a){return a.indexOf("?")!=-1?"&":"?"}function dhtmlDragAndDropObject(){if(window.dhtmlDragAndDrop)return window.dhtmlDragAndDrop;this.dragStartObject=this.dragStartNode=this.dragNode=this.lastLanding=0;this.tempDOMM=this.tempDOMU=null;this.waitDrag=0;window.dhtmlDragAndDrop=this;return this}
dhtmlDragAndDropObject.prototype.removeDraggableItem=function(a){a.onmousedown=null;a.dragStarter=null;a.dragLanding=null};dhtmlDragAndDropObject.prototype.addDraggableItem=function(a,b){a.onmousedown=this.preCreateDragCopy;a.dragStarter=b;this.addDragLanding(a,b)};dhtmlDragAndDropObject.prototype.addDragLanding=function(a,b){a.dragLanding=b};
dhtmlDragAndDropObject.prototype.preCreateDragCopy=function(a){if(!((a||window.event)&&(a||event).button==2)){if(window.dhtmlDragAndDrop.waitDrag)return window.dhtmlDragAndDrop.waitDrag=0,document.body.onmouseup=window.dhtmlDragAndDrop.tempDOMU,document.body.onmousemove=window.dhtmlDragAndDrop.tempDOMM,!1;window.dhtmlDragAndDrop.dragNode&&window.dhtmlDragAndDrop.stopDrag(a);window.dhtmlDragAndDrop.waitDrag=1;window.dhtmlDragAndDrop.tempDOMU=document.body.onmouseup;window.dhtmlDragAndDrop.tempDOMM=
document.body.onmousemove;window.dhtmlDragAndDrop.dragStartNode=this;window.dhtmlDragAndDrop.dragStartObject=this.dragStarter;document.body.onmouseup=window.dhtmlDragAndDrop.preCreateDragCopy;document.body.onmousemove=window.dhtmlDragAndDrop.callDrag;window.dhtmlDragAndDrop.downtime=(new Date).valueOf();a&&a.preventDefault&&a.preventDefault();return!1}};
dhtmlDragAndDropObject.prototype.callDrag=function(a){if(!a)a=window.event;dragger=window.dhtmlDragAndDrop;if(!((new Date).valueOf()-dragger.downtime<100)){if(!dragger.dragNode)if(dragger.waitDrag){dragger.dragNode=dragger.dragStartObject._createDragNode(dragger.dragStartNode,a);if(!dragger.dragNode)return dragger.stopDrag();dragger.dragNode.onselectstart=function(){return!1};dragger.gldragNode=dragger.dragNode;document.body.appendChild(dragger.dragNode);document.body.onmouseup=dragger.stopDrag;dragger.waitDrag=
0;dragger.dragNode.pWindow=window;dragger.initFrameRoute()}else return dragger.stopDrag(a,!0);if(dragger.dragNode.parentNode!=window.document.body&&dragger.gldragNode){var b=dragger.gldragNode;if(dragger.gldragNode.old)b=dragger.gldragNode.old;b.parentNode.removeChild(b);var c=dragger.dragNode.pWindow;b.pWindow&&b.pWindow.dhtmlDragAndDrop.lastLanding&&b.pWindow.dhtmlDragAndDrop.lastLanding.dragLanding._dragOut(b.pWindow.dhtmlDragAndDrop.lastLanding);if(_isIE){var d=document.createElement("Div");d.innerHTML=
dragger.dragNode.outerHTML;dragger.dragNode=d.childNodes[0]}else dragger.dragNode=dragger.dragNode.cloneNode(!0);dragger.dragNode.pWindow=window;dragger.gldragNode.old=dragger.dragNode;document.body.appendChild(dragger.dragNode);c.dhtmlDragAndDrop.dragNode=dragger.dragNode}dragger.dragNode.style.left=a.clientX+15+(dragger.fx?dragger.fx*-1:0)+(document.body.scrollLeft||document.documentElement.scrollLeft)+"px";dragger.dragNode.style.top=a.clientY+3+(dragger.fy?dragger.fy*-1:0)+(document.body.scrollTop||
document.documentElement.scrollTop)+"px";var e=a.srcElement?a.srcElement:a.target;dragger.checkLanding(e,a)}};dhtmlDragAndDropObject.prototype.calculateFramePosition=function(a){if(window.name){for(var b=parent.frames[window.name].frameElement.offsetParent,c=0,d=0;b;)c+=b.offsetLeft,d+=b.offsetTop,b=b.offsetParent;if(parent.dhtmlDragAndDrop){var e=parent.dhtmlDragAndDrop.calculateFramePosition(1);c+=e.split("_")[0]*1;d+=e.split("_")[1]*1}if(a)return c+"_"+d;else this.fx=c;this.fy=d}return"0_0"};
dhtmlDragAndDropObject.prototype.checkLanding=function(a,b){a&&a.dragLanding?(this.lastLanding&&this.lastLanding.dragLanding._dragOut(this.lastLanding),this.lastLanding=a,this.lastLanding=this.lastLanding.dragLanding._dragIn(this.lastLanding,this.dragStartNode,b.clientX,b.clientY,b),this.lastLanding_scr=_isIE?b.srcElement:b.target):a&&a.tagName!="BODY"?this.checkLanding(a.parentNode,b):(this.lastLanding&&this.lastLanding.dragLanding._dragOut(this.lastLanding,b.clientX,b.clientY,b),this.lastLanding=
0,this._onNotFound&&this._onNotFound())};
dhtmlDragAndDropObject.prototype.stopDrag=function(a,b){dragger=window.dhtmlDragAndDrop;if(!b){dragger.stopFrameRoute();var c=dragger.lastLanding;dragger.lastLanding=null;c&&c.dragLanding._drag(dragger.dragStartNode,dragger.dragStartObject,c,_isIE?event.srcElement:a.target)}dragger.lastLanding=null;dragger.dragNode&&dragger.dragNode.parentNode==document.body&&dragger.dragNode.parentNode.removeChild(dragger.dragNode);dragger.dragNode=0;dragger.gldragNode=0;dragger.fx=0;dragger.fy=0;dragger.dragStartNode=
0;dragger.dragStartObject=0;document.body.onmouseup=dragger.tempDOMU;document.body.onmousemove=dragger.tempDOMM;dragger.tempDOMU=null;dragger.tempDOMM=null;dragger.waitDrag=0};dhtmlDragAndDropObject.prototype.stopFrameRoute=function(a){a&&window.dhtmlDragAndDrop.stopDrag(1,1);for(var b=0;b<window.frames.length;b++)try{window.frames[b]!=a&&window.frames[b].dhtmlDragAndDrop&&window.frames[b].dhtmlDragAndDrop.stopFrameRoute(window)}catch(c){}try{parent.dhtmlDragAndDrop&&parent!=window&&parent!=a&&parent.dhtmlDragAndDrop.stopFrameRoute(window)}catch(d){}};
dhtmlDragAndDropObject.prototype.initFrameRoute=function(a,b){if(a)window.dhtmlDragAndDrop.preCreateDragCopy(),window.dhtmlDragAndDrop.dragStartNode=a.dhtmlDragAndDrop.dragStartNode,window.dhtmlDragAndDrop.dragStartObject=a.dhtmlDragAndDrop.dragStartObject,window.dhtmlDragAndDrop.dragNode=a.dhtmlDragAndDrop.dragNode,window.dhtmlDragAndDrop.gldragNode=a.dhtmlDragAndDrop.dragNode,window.document.body.onmouseup=window.dhtmlDragAndDrop.stopDrag,window.waitDrag=0,!_isIE&&b&&(!_isFF||_FFrv<1.8)&&window.dhtmlDragAndDrop.calculateFramePosition();
try{parent.dhtmlDragAndDrop&&parent!=window&&parent!=a&&parent.dhtmlDragAndDrop.initFrameRoute(window)}catch(c){}for(var d=0;d<window.frames.length;d++)try{window.frames[d]!=a&&window.frames[d].dhtmlDragAndDrop&&window.frames[d].dhtmlDragAndDrop.initFrameRoute(window,!a||b?1:0)}catch(e){}};_OperaRv=_KHTMLrv=_FFrv=_isChrome=_isMacOS=_isKHTML=_isOpera=_isIE=_isFF=!1;navigator.userAgent.indexOf("Macintosh")!=-1&&(_isMacOS=!0);navigator.userAgent.toLowerCase().indexOf("chrome")>-1&&(_isChrome=!0);
if(navigator.userAgent.indexOf("Safari")!=-1||navigator.userAgent.indexOf("Konqueror")!=-1)_KHTMLrv=parseFloat(navigator.userAgent.substr(navigator.userAgent.indexOf("Safari")+7,5)),_KHTMLrv>525?(_isFF=!0,_FFrv=1.9):_isKHTML=!0;else if(navigator.userAgent.indexOf("Opera")!=-1)_isOpera=!0,_OperaRv=parseFloat(navigator.userAgent.substr(navigator.userAgent.indexOf("Opera")+6,3));else if(navigator.appName.indexOf("Microsoft")!=-1){if(_isIE=!0,(navigator.appVersion.indexOf("MSIE 8.0")!=-1||navigator.appVersion.indexOf("MSIE 9.0")!=
-1||navigator.appVersion.indexOf("MSIE 10.0")!=-1)&&document.compatMode!="BackCompat")_isIE=8}else _isFF=!0,_FFrv=parseFloat(navigator.userAgent.split("rv:")[1]);
dtmlXMLLoaderObject.prototype.doXPath=function(a,b,c,d){if(_isKHTML||!_isIE&&!window.XPathResult)return this.doXPathOpera(a,b);if(_isIE)return b||(b=this.xmlDoc.nodeName?this.xmlDoc:this.xmlDoc.responseXML),b||dhtmlxError.throwError("LoadXML","Incorrect XML",[b||this.xmlDoc,this.mainObject]),c!=null&&b.setProperty("SelectionNamespaces","xmlns:xsl='"+c+"'"),d=="single"?b.selectSingleNode(a):b.selectNodes(a)||[];else{var e=b;b||(b=this.xmlDoc.nodeName?this.xmlDoc:this.xmlDoc.responseXML);b||dhtmlxError.throwError("LoadXML",
"Incorrect XML",[b||this.xmlDoc,this.mainObject]);b.nodeName.indexOf("document")!=-1?e=b:(e=b,b=b.ownerDocument);var g=XPathResult.ANY_TYPE;if(d=="single")g=XPathResult.FIRST_ORDERED_NODE_TYPE;var f=[],h=b.evaluate(a,e,function(){return c},g,null);if(g==XPathResult.FIRST_ORDERED_NODE_TYPE)return h.singleNodeValue;for(var i=h.iterateNext();i;)f[f.length]=i,i=h.iterateNext();return f}};function j(){if(!this.catches)this.catches=[];return this}j.prototype.catchError=function(a,b){this.catches[a]=b};
j.prototype.throwError=function(a,b,c){if(this.catches[a])return this.catches[a](a,b,c);if(this.catches.ALL)return this.catches.ALL(a,b,c);alert("Error type: "+a+"\nDescription: "+b);return null};window.dhtmlxError=new j;
dtmlXMLLoaderObject.prototype.doXPathOpera=function(a,b){var c=a.replace(/[\/]+/gi,"/").split("/"),d=null,e=1;if(!c.length)return[];if(c[0]==".")d=[b];else if(c[0]=="")d=(this.xmlDoc.responseXML||this.xmlDoc).getElementsByTagName(c[e].replace(/\[[^\]]*\]/g,"")),e++;else return[];for(;e<c.length;e++)d=this._getAllNamedChilds(d,c[e]);c[e-1].indexOf("[")!=-1&&(d=this._filterXPath(d,c[e-1]));return d};
dtmlXMLLoaderObject.prototype._filterXPath=function(a,b){for(var c=[],b=b.replace(/[^\[]*\[\@/g,"").replace(/[\[\]\@]*/g,""),d=0;d<a.length;d++)a[d].getAttribute(b)&&(c[c.length]=a[d]);return c};
dtmlXMLLoaderObject.prototype._getAllNamedChilds=function(a,b){var c=[];_isKHTML&&(b=b.toUpperCase());for(var d=0;d<a.length;d++)for(var e=0;e<a[d].childNodes.length;e++)_isKHTML?a[d].childNodes[e].tagName&&a[d].childNodes[e].tagName.toUpperCase()==b&&(c[c.length]=a[d].childNodes[e]):a[d].childNodes[e].tagName==b&&(c[c.length]=a[d].childNodes[e]);return c};function dhtmlXHeir(a,b){for(var c in b)typeof b[c]=="function"&&(a[c]=b[c]);return a}
function dhtmlxEvent(a,b,c){a.addEventListener?a.addEventListener(b,c,!1):a.attachEvent&&a.attachEvent("on"+b,c)}dtmlXMLLoaderObject.prototype.xslDoc=null;dtmlXMLLoaderObject.prototype.setXSLParamValue=function(a,b,c){if(!c)c=this.xslDoc;if(c.responseXML)c=c.responseXML;var d=this.doXPath("/xsl:stylesheet/xsl:variable[@name='"+a+"']",c,"http://www.w3.org/1999/XSL/Transform","single");if(d!=null)d.firstChild.nodeValue=b};
dtmlXMLLoaderObject.prototype.doXSLTransToObject=function(a,b){if(!a)a=this.xslDoc;if(a.responseXML)a=a.responseXML;if(!b)b=this.xmlDoc;if(b.responseXML)b=b.responseXML;if(_isIE){d=new ActiveXObject("Msxml2.DOMDocument.3.0");try{b.transformNodeToObject(a,d)}catch(c){d=b.transformNode(a)}}else{if(!this.XSLProcessor)this.XSLProcessor=new XSLTProcessor,this.XSLProcessor.importStylesheet(a);var d=this.XSLProcessor.transformToDocument(b)}return d};
dtmlXMLLoaderObject.prototype.doXSLTransToString=function(a,b){var c=this.doXSLTransToObject(a,b);return typeof c=="string"?c:this.doSerialization(c)};dtmlXMLLoaderObject.prototype.doSerialization=function(a){if(!a)a=this.xmlDoc;if(a.responseXML)a=a.responseXML;if(_isIE)return a.xml;else{var b=new XMLSerializer;return b.serializeToString(a)}};
dhtmlxEventable=function(a){a.attachEvent=function(a,c,d){a="ev_"+a.toLowerCase();this[a]||(this[a]=new this.eventCatcher(d||this));return a+":"+this[a].addEvent(c)};a.callEvent=function(a,c){a="ev_"+a.toLowerCase();return this[a]?this[a].apply(this,c):!0};a.checkEvent=function(a){return!!this["ev_"+a.toLowerCase()]};a.eventCatcher=function(a){var c=[],d=function(){for(var d=!0,g=0;g<c.length;g++)if(c[g]!=null)var f=c[g].apply(a,arguments),d=d&&f;return d};d.addEvent=function(a){typeof a!="function"&&
(a=eval(a));return a?c.push(a)-1:!1};d.removeEvent=function(a){c[a]=null};return d};a.detachEvent=function(a){if(a!=!1){var c=a.split(":");this[c[0]].removeEvent(c[1])}};a.detachAllEvents=function(){for(var a in this)a.indexOf("ev_")==0&&delete this[a]};a=null};

//v.3.5 build 120731

/*
Copyright DHTMLX LTD. http://www.dhtmlx.com
You allowed to use this component or parts of it under GPL terms
To use it on other terms or get Professional edition of the component please contact us at sales@dhtmlx.com
*///v.3.5 build 120731

/*
Copyright DHTMLX LTD. http://www.dhtmlx.com
You allowed to use this component or parts of it under GPL terms
To use it on other terms or get Professional edition of the component please contact us at sales@dhtmlx.com
*/
function dhtmlxSlider(a,b,c,d,e,i,h,j){if(_isIE)try{document.execCommand("BackgroundImageCache",!1,!0)}catch(l){}var f;if(a&&typeof a=="object"&&!a.nodeName)f=a.parent,c=a.skin,e=a.min,i=a.max,j=a.step,d=a.vertical,h=a.value,b=a.size;if(a)f=typeof a!="object"?document.getElementById(a):a;else{var k="slider_div_"+(new Date).valueOf()+Math.random(1E3);f=document.createElement("div");f.setAttribute("id",k);for(var g=document.body.lastChild;g.lastChild&&g.lastChild.nodeType==1;)g=g.lastChild;g.parentNode.insertBefore(f,
g)}if(typeof b=="object")c=b.skin,e=b.min,i=b.max,j=b.step,d=b.vertical,h=b.value,b=b.size;this.size=b;this.vMode=d||!1;this.skin=dhtmlx.skin||c||"default";this.parent=f;this.disabled=this.isInit=!1;this.value=h=="undefined"?e||0:h;this.inputPriority=!0;this.stepping=!1;this.imgURL=window.dhx_globalImgPath||dhtmlx.image_path||"";this._skinsImgs={"default":{ls:1,lz:1,rz:1,rs:1},ball:{ls:1,lz:1,rz:1,rs:1},zipper:{bg:1,lz:1,rz:1},arrow:{bg:1,ls:1,rs:1},arrowgreen:{bg:1,ls:1,rs:1},simplesilver:{lz:1,
ls:1,rs:1,rz:1},simplegray:{lz:1,ls:1,rs:1,rz:1},bar:{bg:1,ls:1,rs:1},dhx_skyblue:{bg:1}};this._def=[e-0||0,i-0||100,j-0||1,h-0||0,b-0];dhtmlxEventable(this);return this}
dhtmlxSlider.prototype.createStructure=function(){if(this.con)this.con.parentNode.removeChild(this.con),this.con=null;if(this.vMode){this._sW="height";this._sH="width";this._sL="top";this._sT="left";var a=this.imgURL+"skins/"+this.skin+"/vertical/"}else this._sW="width",this._sH="height",this._sL="left",this._sT="top",a=this.imgURL+"skins/"+this.skin+"/";this.con=document.createElement("DIV");this.con.onselectstart=function(){return!1};this.con._etype="slider";this.con.className="dhtmlxSlider"+(this.skin!=
"default"?"_"+this.skin:"");if(this._skinsImgs[this.skin].bg)this.con.style.backgroundImage="url("+a+"bg.gif)";this.drag=document.createElement("DIV");this.drag._etype="drag";this.drag.className="selector";this.drag.style.backgroundImage="url("+a+"selector.gif)";var b=document.createElement("DIV");b.className="leftSide";if(this._skinsImgs[this.skin].ls)b.style.background="url("+a+"leftside_bg.gif)";this.leftZone=document.createElement("DIV");this.leftZone.className="leftZone";if(this._skinsImgs[this.skin].lz)this.leftZone.style.background=
"url("+a+"leftzone_bg.gif)";var c=document.createElement("DIV");c.className="rightSide";if(this._skinsImgs[this.skin].rs)c.style.background="url("+a+"rightside_bg.gif)";this.rightZone=document.createElement("DIV");this.rightZone.className="rightZone";if(this._skinsImgs[this.skin].rz)this.rightZone.style.background="url("+a+"rightzone_bg.gif)";this.con.appendChild(b);this.con.appendChild(this.leftZone);this.con.appendChild(this.rightZone);this.con.appendChild(c);this.con.appendChild(this.drag);this.parent.appendChild(this.con);
(!this.parent.parentNode||!this.parent.parentNode.tagName)&&document.body.appendChild(this.parent);if(this.vMode){this._sW="height";this._sH="width";this._sL="top";this._sT="left";this.con.style.width=this.con.offsetHeight+"px";for(var d=0;d<this.con.childNodes.length;d++){this.con.childNodes[d].style.fontSize="0";var e=this.con.childNodes[d].offsetWidth;this.con.childNodes[d].style.width=this.con.childNodes[d].offsetHeight+"px";this.con.childNodes[d].style.height=e+"px";e=this.con.childNodes[d].offsetLeft;
this.con.childNodes[d].style.left=this.con.childNodes[d].offsetTop+"px";this.con.childNodes[d].style.top=e+"px"}c.style.top=this.size-c.offsetHeight+"px";this.zoneSize=this.size-c.offsetHeight;this.dragLeft=this.drag.offsetTop;this.dragWidth=this.drag.offsetHeight;this.rightZone.style.height=this.zoneSize+"px"}else this.zoneSize=this.size-c.offsetWidth,this.dragLeft=this.drag.offsetLeft,this.dragWidth=this.drag.offsetWidth,this.rightZone.style.width=this.zoneSize+"px";this.con.style[this._sW]=this.size+
"px";this.con.onmousedown=this._onMouseDown;this.con.onmouseup=this.con.onmouseout=function(){clearInterval(this.that._int)};this.con.that=this;this._aCalc(this._def)};
dhtmlxSlider.prototype._aCalc=function(a){if(this.isInit){this.shift=a[0];this.limit=a[1]-this.shift;this._mod=(a[4]-this.dragLeft*2-this.dragWidth)/this.limit;this._step=a[2];this.step=this._step*this._mod;this._xlimit=a[4]-this.dragLeft*2-this.dragWidth;if(!this.posX)this.posX=this._xlimit*(a[3]-this.shift)/this.limit;this._applyPos(!0);return this}};dhtmlxSlider.prototype.setMin=function(a){this._def[0]=a-0;this._aCalc(this._def)};dhtmlxSlider.prototype.setMax=function(a){this._def[1]=a-0;this._aCalc(this._def)};
dhtmlxSlider.prototype.setStep=function(a){this._def[2]=a-0;this._aCalc(this._def)};
dhtmlxSlider.prototype._applyPos=function(a){if(this.isInit){if(this.step!=1&&this.step)this.posX=Math.round(this.posX/this.step)*this.step;if(this.posX<0)this.posX=0;if(this.value<(this._def[0]||0))this.value=this._def[0]||0;if(this.value>this._def[1])this.value=this._def[1];if(this.posX>this._xlimit)this.posX=this._xlimit;var b=this.drag.style[this._sL];this.drag.style[this._sL]=this.posX+this.dragLeft*1+"px";this.leftZone.style[this._sW]=this.posX+this.dragLeft*1+"px";this.rightZone.style[this._sL]=
this.posX+this.dragLeft*1+1+"px";this.rightZone.style[this._sW]=this.zoneSize-(this.posX+this.dragLeft*1)+"px";var c=this.getValue();if(this._link)this._linkBoth?this._link.value=c:this._link.innerHTML=c;!a&&b!=this.drag.style[this._sL]&&this.callEvent("onChange",[c,this]);this.value=this.getValue();this._dttp||this._setTooltip(c)}};dhtmlxSlider.prototype._setTooltip=function(a){this.con.title=a};dhtmlxSlider.prototype.setSkin=function(a){this.skin=a||"default";this.isInit&&this.createStructure()};
dhtmlxSlider.prototype.startDrag=function(a){if(!this._busy&&(a.button===0||a.button===1)){this.drag_mx=a.clientX;this.drag_my=a.clientY;this.drag_cx=this.posX;this.d_b_move=document.body.onmousemove;this.d_b_up=document.body.onmouseup;var b=this;document.body.onmouseup=function(a){b.stopDrag(a||event);b=null};document.body.onmousemove=function(a){b.onDrag(a||event)};this._busy=!0}};
dhtmlxSlider.prototype.onDrag=function(a){if(this._busy)this.posX=this.vMode?this.drag_cx+a.clientY-this.drag_my:this.drag_cx+a.clientX-this.drag_mx,this._applyPos()};dhtmlxSlider.prototype.stopDrag=function(){document.body.onmousemove=this.d_b_move?this.d_b_move:null;document.body.onmouseup=this.d_b_up?this.d_b_up:null;this.d_b_move=this.d_b_up=null;this._busy=!1;this.callEvent("onSlideEnd",[this.getValue()])};
dhtmlxSlider.prototype.getValue=function(){return!this._busy&&this.inputPriority?(Math.round(this.value/this._step)*this._step).toFixed(6)-0:Math.round((Math.round(this.posX/this._mod/this._step)*this._step+this.shift*1)*1E4)/1E4};dhtmlxSlider.prototype.setValue=function(a,b){if(!isNaN(a))this._def[3]=this.value=a-0,this.posX=Math.round(((a||0)-this.shift)*this._mod),this._applyPos(b==null?!0:b)};
dhtmlxSlider.prototype._getActionElement=function(a){return a._etype?a:a.parentNode?this._getActionElement(a.parentNode):null};
dhtmlxSlider.prototype._onMouseDown=function(a){if(!this.that.disabled){var a=a||event,b=this.that,c=b._getActionElement(_isIE?a.srcElement:a.target);switch(c._etype){case "slider":var d=b.vMode?a.clientY-(getAbsoluteTop(b.con)-document.body.scrollTop):a.clientX-(getAbsoluteLeft(b.con)-document.body.scrollLeft),e=b.posX;b.posX=d-b.dragLeft-b.dragWidth/2;b.direction=b.posX>e?1:-1;b.stepping?(clearInterval(b._int),b.setValue(b.value+b._step*b.direction,!1),b._int=setInterval(function(){b.setValue(b.value+
b._step*b.direction,!1)},600)):(b._busy=!0,b._applyPos(),b._busy=!1);break;case "drag":b.startDrag(a||event)}return!1}};dhtmlxSlider.prototype.setOnChangeHandler=function(a){this.attachEvent("onChange",a)};dhtmlxSlider.prototype._linkFrom=function(){this.disabled||this.setValue(parseFloat(this._link.value),!1)};
dhtmlxSlider.prototype.linkTo=function(a){this._link=a=typeof a!="object"?document.getElementById(a):a;var b=a.tagName.toString().toLowerCase();if(this._linkBoth=b=="input"||b=="select"||b=="textarea"?1:0){var c=this,d=function(){this._nextSlider&&window.clearTimeout(this._nextSlider);this._nextSlider=window.setTimeout(function(){c._linkFrom()},500)};a.onblur=a.onkeypress=a.onchange=d}this._applyPos()};
dhtmlxSlider.prototype.enableTooltip=function(a){this._dttp=!convertStringToBoolean(a);this._setTooltip(this._dttp?"":this.getValue())};dhtmlxSlider.prototype.setImagePath=function(a){this.imgURL=a};dhtmlxSlider.prototype.init=function(){this.isInit=!0;this.createStructure()};dhtmlxSlider.prototype.setInputPriority=function(a){this.inputPriority=a};dhtmlxSlider.prototype.setSteppingMode=function(a){this.stepping=a};dhtmlxSlider.prototype.disable=function(a){this.disabled=a};
(function(){dhtmlx.extend_api("dhtmlxSlider",{_init:function(a){return[a.parent,a.size,a.skin,a.vertical,a.min,a.max,a.value,a.step]},link:"linkTo"},{})})();

//v.3.5 build 120731

/*
Copyright DHTMLX LTD. http://www.dhtmlx.com
You allowed to use this component or parts of it under GPL terms
To use it on other terms or get Professional edition of the component please contact us at sales@dhtmlx.com
*/